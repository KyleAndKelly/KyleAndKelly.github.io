<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>陈同学的博客</title>
  
  <subtitle>Blog of Chen</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-05-05T05:31:38.233Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Chen</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Notes of System Design No.02  — Design a TinyURL</title>
    <link href="http://example.com/2022/05/05/Notes-of-System-Design-02-%E2%80%94-Design-a/"/>
    <id>http://example.com/2022/05/05/Notes-of-System-Design-02-%E2%80%94-Design-a/</id>
    <published>2022-05-05T05:23:57.000Z</published>
    <updated>2022-05-05T05:31:38.233Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h2 id="Step1-Functional-Requirements"><a href="#Step1-Functional-Requirements" class="headerlink" title="Step1 Functional Requirements"></a>Step1 Functional Requirements</h2><p><img src="https://files.mdnice.com/user/1489/75b10031-679d-46b9-a8c7-91f6376f452b.png"></p><ul><li><ol><li>给出长链接 系统能够给出唯一的短链接别名</li><li>短链接能够重定向到长链接</li><li>用户可以自己选择个性化的短链接</li><li>短链接应该有超时时间，如果用户没有设定这个超时时间，那么就按照默认的超时时间来处理。</li></ol></li></ul><h2 id="Step2-Non-Functional-Requirements"><a href="#Step2-Non-Functional-Requirements" class="headerlink" title="Step2 Non-Functional Requirements"></a>Step2 Non-Functional Requirements</h2><p><img src="https://files.mdnice.com/user/1489/a842729d-1f36-421f-92e6-6ff7ee793bbb.png"></p><ol><li>高可用</li><li>低延迟</li><li>短链接不可推断</li></ol><h2 id="Step3-Capacity-Estimation-and-Constraints"><a href="#Step3-Capacity-Estimation-and-Constraints" class="headerlink" title="Step3 Capacity Estimation and Constraints"></a>Step3 Capacity Estimation and Constraints</h2><p><img src="https://files.mdnice.com/user/1489/7478eda1-ae98-4282-acdb-9772d7822980.png"></p><p><img src="https://files.mdnice.com/user/1489/9e1ac23a-f53b-4934-969e-08695813bc52.png"></p><p><img src="https://files.mdnice.com/user/1489/c45121fa-5495-4f38-8257-d8d9366c87a3.png"></p><ol><li><p><strong>Traffic estimates</strong>:按照每月500M的访问，100:1的读写比，每秒会有200个URL  系统的QPS&#x3D; 100*200&#x3D;20K&#x2F;s</p></li><li><p><strong>Storage estimates</strong>: 按照每月500M的访问，对每条短URL存储5年，并且每个短URL大约500bytes的大小来估计，存储容量应该达到  30 billion * 500 bytes &#x3D; 15 TB </p></li><li><p><strong>Bandwidth estimates</strong>：按照每秒200个URL的访问 每个URL数据为500bytes 则带宽为200 * 500 bytes &#x3D; 100 KB&#x2F;s。按照读写比100：1，则每秒的数据为20K * 500 bytes &#x3D; 10 MB&#x2F;s</p></li><li><p><strong>Memory estimates</strong> ：根据80：20法则，缓存20%的URL，Since we have 20K requests per second, we will be getting 1.7 billion requests per day: 20K * 3600 seconds * 24 hours &#x3D; ~1.7 billion<br>To cache 20% of these requests, we will need 170GB of memory.  0.2 * 1.7 billion * 500 bytes &#x3D; ~170GB。One thing to note here is that since there will be a lot of duplicate requests (of the same URL),  therefore, our actual memory usage will be less than 170GB.</p></li><li><p><strong>Summary</strong>  </p><p><img src="https://files.mdnice.com/user/1489/c21c26ad-3498-4549-986e-c145eb857706.png"></p></li></ol><h2 id="Step4-System-APIs"><a href="#Step4-System-APIs" class="headerlink" title="Step4 System APIs"></a>Step4 System APIs</h2><p><img src="https://files.mdnice.com/user/1489/e3bac376-4331-4a18-b8b1-2dffe09fa570.png"></p><p>1.一个生成短链接的接口 。注意这个接口包含了哪些参数</p><ol start="2"><li>一个删除短链接的接口。</li></ol><h2 id="Step5-Database-Design"><a href="#Step5-Database-Design" class="headerlink" title="Step5   Database Design"></a>Step5   Database Design</h2><p> <img src="https://files.mdnice.com/user/1489/b5751a29-15f3-47a9-82e6-0587af59fb78.png"></p><p><img src="https://files.mdnice.com/user/1489/db615d53-3c3e-4f30-98d0-d7afc1b6b49a.png"></p><ul><li>数据库设计</li></ul><h2 id="Step6-High-Level-Design"><a href="#Step6-High-Level-Design" class="headerlink" title="Step6 High-Level Design"></a>Step6 High-Level Design</h2><p><img src="https://files.mdnice.com/user/1489/be689e6e-e9c6-43e8-8c27-e32fe6e44d5f.png" alt="High-Level Design Diagram"></p><h3 id="Q1-Short-URL-Encoding"><a href="#Q1-Short-URL-Encoding" class="headerlink" title="Q1 :  Short URL Encoding"></a>Q1 :  Short URL Encoding</h3><h4 id="Scheme-1-Encoding-actual-URL"><a href="#Scheme-1-Encoding-actual-URL" class="headerlink" title="Scheme 1: Encoding actual URL"></a>Scheme 1: Encoding actual URL</h4><p>Ref: </p><p><a href="https://blog.csdn.net/qq_42992084/article/details/112252684">MD5</a></p><p><a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1017684507717184">Base64</a></p><p>先用MD5算法 处理原来的长链接 得到128bit的二进制数据</p><p>再用Base64编码这个128bit 二进制 ，得到一个大于21个字符的数据</p><p>在从这21左右字符里面 挑头6个或者8个作为最终的短链接编码</p><p>但是这样会导致不同长链接编码重复</p><p>所以一般会这个base64编码后的字符串之外挑一些字符 </p><p>或者交换base64编码后的字符来达到去重复的效果</p><p><img src="https://files.mdnice.com/user/1489/9e7d2474-d698-4f23-9250-e3e26b4c3780.png"></p><p>但是上面这个方案还是存在一些问题</p><p>当不同的用户输入同一个长链接时 得到的短链接相同怎么办？</p><p>解决办法思考：</p><ol><li><p>方案一：可以在每个输入的长URL中设置一个不断累加连续计数 保证唯一性 。这样带来的问题是，不断累加的计数会不会溢出，而且不断累加的计数也会影响系统性能</p></li><li><p>方案二：可以把user_id放到长URL中，保证唯一性。但是这样如果用户没有登录的话，就得让用户自己手动去选择一个唯一的key，在生成这个唯一key的过程中，我们要不断的去生成才能得到一个唯一的key。</p></li></ol><h4 id="Scheme-2-Generating-keys-offline"><a href="#Scheme-2-Generating-keys-offline" class="headerlink" title="Scheme 2:Generating keys offline"></a>Scheme 2:Generating keys offline</h4><p>单独设定一个专门离线产生Key的服务器(KGS: Key Generation Service)和 存储这些Key的数据库</p><p><img src="https://files.mdnice.com/user/1489/99e8efac-7797-491a-9bbc-b2c4d5a255ba.png"></p><p><img src="https://files.mdnice.com/user/1489/6cd68f41-c40a-4edb-8bc8-d7cd93bba938.png"></p><p><img src="https://files.mdnice.com/user/1489/e0973285-6392-47fc-88fe-16be8234c57a.png"></p><h3 id="Q2-Data-Partitioning-and-Replication"><a href="#Q2-Data-Partitioning-and-Replication" class="headerlink" title="Q2 :  Data Partitioning and Replication"></a>Q2 :  Data Partitioning and Replication</h3><p><img src="https://files.mdnice.com/user/1489/405fdb5d-b3aa-4a38-870c-04af7e19af3d.png"></p><h3 id="Q3-Cache"><a href="#Q3-Cache" class="headerlink" title="Q3 Cache"></a>Q3 Cache</h3><p><img src="https://files.mdnice.com/user/1489/0b1219b5-6008-42e7-9ee7-53b5b282fe53.png"></p><h3 id="Q4-Load-Balancer-LB"><a href="#Q4-Load-Balancer-LB" class="headerlink" title="Q4 Load Balancer (LB)"></a>Q4 Load Balancer (LB)</h3><p><img src="https://files.mdnice.com/user/1489/6dd4d8f7-c757-4148-a3e0-ecc48b3a801e.png"></p><h3 id="Q5-Purging-or-DB-cleanup"><a href="#Q5-Purging-or-DB-cleanup" class="headerlink" title="Q5. Purging or DB cleanup"></a>Q5. Purging or DB cleanup</h3><p>当数据库中的URL过期了</p><p>要尝试主动的去清理</p><p><img src="https://files.mdnice.com/user/1489/ab3072a0-cea9-404d-a0e3-68a1a758effb.png"></p><h3 id="Q6-Telemetry-x2F-Security-x2F-Permissions"><a href="#Q6-Telemetry-x2F-Security-x2F-Permissions" class="headerlink" title="Q6 . Telemetry  &#x2F; Security &#x2F;Permissions"></a>Q6 . Telemetry  &#x2F; Security &#x2F;Permissions</h3><p><img src="https://files.mdnice.com/user/1489/1bd84ba9-23f3-4813-bbf6-ed0904f19839.png"></p>]]></content>
    
    
    <summary type="html"> Design a TinyURL</summary>
    
    
    
    <category term="系统设计" scheme="http://example.com/categories/%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/"/>
    
    
    <category term="系统设计" scheme="http://example.com/tags/%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>Notes of System Design No.01 —Answering the SDIs Step by Step</title>
    <link href="http://example.com/2022/05/04/Notes-of-System-Design-No-01-%E2%80%94Answering-the-SDIs-Step-by-Step/"/>
    <id>http://example.com/2022/05/04/Notes-of-System-Design-No-01-%E2%80%94Answering-the-SDIs-Step-by-Step/</id>
    <published>2022-05-04T06:52:06.000Z</published>
    <updated>2022-05-04T07:03:53.683Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><p>In this Article , </p><p>I will give a introduction to </p><p>the guildline of answering the SDIs(system design interviews) problem</p><p>lets get into it!</p><p>Mainly Reference:<a href="https://www.educative.io/courses/grokking-the-system-design-interview">https://www.educative.io/courses/grokking-the-system-design-interview</a> </p><h2 id="Step-1-Requirements-clarifications"><a href="#Step-1-Requirements-clarifications" class="headerlink" title="Step 1: Requirements clarifications"></a>Step 1: Requirements clarifications</h2><p>在一开始的时候问清楚设计的一些关键指标，缩小设计范围</p><p> Define the end goals And   clarifying ambiguities early in the interview is critical.</p><p><img src="https://files.mdnice.com/user/1489/df9c4df3-40ed-41bf-901d-68b0dbf29ddc.png"></p><h2 id="Step2-System-interface-Design"><a href="#Step2-System-interface-Design" class="headerlink" title="Step2 System interface Design"></a>Step2 System interface Design</h2><p>明确这个系统会需要哪些接口</p><p><img src="https://files.mdnice.com/user/1489/4b26cc35-f619-4a69-b844-4e995e377517.png"></p><h2 id="Step3-Back-of-the-envelope-estimation"><a href="#Step3-Back-of-the-envelope-estimation" class="headerlink" title="Step3   Back-of-the-envelope estimation"></a>Step3   Back-of-the-envelope estimation</h2><p>粗略的估计系统的规模</p><p><img src="https://files.mdnice.com/user/1489/ad5f1ed1-8a0b-4ac0-b64c-66f97b9158c3.png"></p><h2 id="Step4-Defining-data-model"><a href="#Step4-Defining-data-model" class="headerlink" title="Step4   Defining data model"></a>Step4   Defining data model</h2><p>确定数据结构</p><p><img src="https://files.mdnice.com/user/1489/7e82b4f9-b727-458f-b4bd-13fea0f80c47.png"></p><h2 id="Step5-High-level-design"><a href="#Step5-High-level-design" class="headerlink" title="Step5  High-level design"></a>Step5  High-level design</h2><p>顶层设计，用框图的形式画出系统的结构</p><p><img src="https://files.mdnice.com/user/1489/44e36158-cab9-4a0f-a55c-68769f20fe3b.png"></p><p><img src="https://files.mdnice.com/user/1489/811980f0-8214-4072-bb10-6383446d4c18.png"></p><h2 id="Step6-Detailed-Degisn"><a href="#Step6-Detailed-Degisn" class="headerlink" title="Step6  Detailed Degisn"></a>Step6  Detailed Degisn</h2><p>根据面试官感兴趣的方向,</p><p> 针对里面的2-3个模块作重点且细节的讨论</p><p>可以给出几种不同的设计方案 然后说出利弊 </p><p>然后说明为什么用目前的这个设计方案。</p><p><img src="https://files.mdnice.com/user/1489/72a6a418-8d62-4a09-82a5-753f4e732313.png"></p><h2 id="Step7-Identifying-and-resolving-bottlenecks"><a href="#Step7-Identifying-and-resolving-bottlenecks" class="headerlink" title="Step7  Identifying and resolving bottlenecks"></a>Step7  Identifying and resolving bottlenecks</h2><p>尽可能多的找到目前系统存在的弊端</p><p>然后给出不同的解决方案去处理它</p><p><img src="https://files.mdnice.com/user/1489/c6481036-7a54-4c42-a864-406366c8f2c7.png"></p>]]></content>
    
    
    <summary type="html">Answering the SDIs Step by Step </summary>
    
    
    
    <category term="系统设计" scheme="http://example.com/categories/%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/"/>
    
    
    <category term="系统设计" scheme="http://example.com/tags/%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>工厂模式的C++实现</title>
    <link href="http://example.com/2022/04/29/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8FC-%E5%AE%9E%E7%8E%B0/"/>
    <id>http://example.com/2022/04/29/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8FC-%E5%AE%9E%E7%8E%B0/</id>
    <published>2022-04-29T06:58:07.000Z</published>
    <updated>2022-04-29T07:03:05.881Z</updated>
    
    <content type="html"><![CDATA[<h2 id="方法工厂"><a href="#方法工厂" class="headerlink" title="方法工厂"></a>方法工厂</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Shoe</span>&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="keyword">virtual</span> ~<span class="built_in">Shoe</span>()&#123;&#125;;</span><br><span class="line">        <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">show</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NikeShoe</span>:<span class="keyword">public</span> Shoe&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;我是Nike&quot;</span>&lt;&lt;endl;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Factory</span>&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="keyword">virtual</span> ~<span class="built_in">Factory</span>()&#123;&#125;;</span><br><span class="line">        <span class="function"><span class="keyword">virtual</span> Shoe* <span class="title">Makeshoe</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NikeFactory</span> : <span class="keyword">public</span> Factory&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function">Shoe* <span class="title">Makeshoe</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            Shoe* tmp = <span class="keyword">new</span> NikeShoe;</span><br><span class="line">            <span class="keyword">return</span> tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Step1 指定工厂</span></span><br><span class="line">    Factory* f = <span class="keyword">new</span> <span class="built_in">NikeFactory</span>();</span><br><span class="line">    <span class="comment">//Step2 工厂生产出鞋子</span></span><br><span class="line">     Shoe*  s  = f-&gt;<span class="built_in">Makeshoe</span>();   </span><br><span class="line">    <span class="comment">//Step3 打出口号</span></span><br><span class="line">    s-&gt;<span class="built_in">show</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// cout&lt;&lt;&quot;hello world&quot;&lt;&lt;endl;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="抽象工厂"><a href="#抽象工厂" class="headerlink" title="抽象工厂"></a>抽象工厂</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Shoe</span>&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="keyword">virtual</span> ~<span class="built_in">Shoe</span>()&#123;&#125;;</span><br><span class="line">        <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">show</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NikeShoe</span>:<span class="keyword">public</span> Shoe&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;我是Nike的鞋子&quot;</span>&lt;&lt;endl;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cloth</span>&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="keyword">virtual</span> ~<span class="built_in">Cloth</span>()&#123;&#125;;</span><br><span class="line">        <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">show</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NikeCloth</span>:<span class="keyword">public</span> Cloth&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;我是Nike的衣服&quot;</span>&lt;&lt;endl;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Factory</span>&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="keyword">virtual</span> ~<span class="built_in">Factory</span>()&#123;&#125;;</span><br><span class="line">        <span class="function"><span class="keyword">virtual</span> Shoe* <span class="title">Makeshoe</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">        <span class="function"><span class="keyword">virtual</span> Cloth* <span class="title">Makecloth</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NikeFactory</span> : <span class="keyword">public</span> Factory&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function">Shoe* <span class="title">Makeshoe</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            Shoe* tmp = <span class="keyword">new</span> NikeShoe;</span><br><span class="line">            <span class="keyword">return</span> tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">Cloth* <span class="title">Makecloth</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            Cloth* tmp = <span class="keyword">new</span> NikeCloth;</span><br><span class="line">            <span class="keyword">return</span> tmp;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Step1 指定工厂</span></span><br><span class="line">    Factory* f = <span class="keyword">new</span> <span class="built_in">NikeFactory</span>();</span><br><span class="line">    <span class="comment">//Step2 工厂生产出鞋子</span></span><br><span class="line">     Shoe*  s  = f-&gt;<span class="built_in">Makeshoe</span>();   </span><br><span class="line">    <span class="comment">//Step3 打出口号</span></span><br><span class="line">    s-&gt;<span class="built_in">show</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Step2 工厂生产衣服</span></span><br><span class="line">     Cloth*  c  = f-&gt;<span class="built_in">Makecloth</span>();   </span><br><span class="line">    <span class="comment">//Step3 打出口号</span></span><br><span class="line">    c-&gt;<span class="built_in">show</span>();</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="模板工厂"><a href="#模板工厂" class="headerlink" title="模板工厂"></a>模板工厂</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Shoe</span>&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="keyword">virtual</span> ~<span class="built_in">Shoe</span>()&#123;&#125;;</span><br><span class="line">        <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">show</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NikeShoe</span>:<span class="keyword">public</span> Shoe&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;我是Nike的鞋子&quot;</span>&lt;&lt;endl;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cloth</span>&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="keyword">virtual</span> ~<span class="built_in">Cloth</span>()&#123;&#125;;</span><br><span class="line">        <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">show</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NikeCloth</span>:<span class="keyword">public</span> Cloth&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;我是Nike的衣服&quot;</span>&lt;&lt;endl;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">AbsProductType_t</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Factory</span>&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="keyword">virtual</span> ~<span class="built_in">Factory</span>()&#123;&#125;;</span><br><span class="line">        <span class="function"><span class="keyword">virtual</span> AbsProductType_t* <span class="title">MakeProduct</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">AbsProductType_t</span>,<span class="keyword">class</span> <span class="title class_">ConcreatProductType_t</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreatFactory</span> : <span class="keyword">public</span> Factory&lt;AbsProductType_t&gt;&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">  </span><br><span class="line">        <span class="function">AbsProductType_t* <span class="title">MakeProduct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            AbsProductType_t* tmp = <span class="keyword">new</span> ConcreatProductType_t;</span><br><span class="line">            <span class="keyword">return</span> tmp;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">     ConcreatFactory&lt;Cloth,NikeCloth&gt; f;</span><br><span class="line">     Cloth* ns = f.<span class="built_in">MakeProduct</span>();</span><br><span class="line">     ns-&gt;<span class="built_in">show</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">工厂模式的C++实现</summary>
    
    
    
    <category term="设计模式" scheme="http://example.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="设计模式" scheme="http://example.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>策略模式C++实现</title>
    <link href="http://example.com/2022/04/20/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8FC-%E5%AE%9E%E7%8E%B0/"/>
    <id>http://example.com/2022/04/20/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8FC-%E5%AE%9E%E7%8E%B0/</id>
    <published>2022-04-20T07:05:26.000Z</published>
    <updated>2022-04-29T06:52:52.982Z</updated>
    
    <content type="html"><![CDATA[<h2 id="没有用策略模式的场景"><a href="#没有用策略模式的场景" class="headerlink" title="没有用策略模式的场景"></a>没有用策略模式的场景</h2><p><em>Strategy_origin.cpp</em></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Runto</span><span class="params">(string country)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(country == <span class="string">&quot;Singpore&quot;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;Welcome to  Singpore&quot;</span>&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(country == <span class="string">&quot;Canada&quot;</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;Welcome to  Canada&quot;</span>&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(country == <span class="string">&quot;France&quot;</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;Welcome to  France&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(country == <span class="string">&quot;German&quot;</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;Welcome to  German&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;Oops! no such choice&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    string destination;</span><br><span class="line">    cin&gt;&gt;destination;</span><br><span class="line">    <span class="built_in">Runto</span>(destination);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="使用策略模式的场景"><a href="#使用策略模式的场景" class="headerlink" title="使用策略模式的场景"></a>使用策略模式的场景</h2><p><em>Strategy_modfied.cpp</em></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//策略类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CountryStrategy</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">printInfo</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Singpore</span>: <span class="keyword">public</span> CountryStrategy</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">printInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;welcome to Singpore &quot;</span>&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">France</span>: <span class="keyword">public</span> CountryStrategy</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">printInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;welcome to France &quot;</span>&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Canada</span>: <span class="keyword">public</span> CountryStrategy</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">printInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;welcome to Canada &quot;</span>&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//上下文选择类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ChooseCountry</span>&#123;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">          CountryStrategy* country;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">      </span><br><span class="line">        <span class="built_in">ChooseCountry</span>(CountryStrategy* c):<span class="built_in">country</span>(c)&#123;&#125;;</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">printInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">            country-&gt;<span class="built_in">printInfo</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Canada*  c = <span class="keyword">new</span> Canada;</span><br><span class="line">    Singpore*  s = <span class="keyword">new</span> Singpore;</span><br><span class="line">    <span class="function">ChooseCountry <span class="title">ch</span><span class="params">(s)</span></span>;</span><br><span class="line">    ch.<span class="built_in">printInfo</span>();</span><br><span class="line">    <span class="keyword">delete</span> c;</span><br><span class="line">    <span class="keyword">delete</span> s;</span><br><span class="line">    c= <span class="literal">NULL</span>;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html"> 策略模式的一种简单实现C++</summary>
    
    
    
    <category term="设计模式" scheme="http://example.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="设计模式" scheme="http://example.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>单例模式的C++实现</title>
    <link href="http://example.com/2022/04/19/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E7%9A%84C-%E5%AE%9E%E7%8E%B0/"/>
    <id>http://example.com/2022/04/19/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E7%9A%84C-%E5%AE%9E%E7%8E%B0/</id>
    <published>2022-04-19T12:06:56.000Z</published>
    <updated>2022-04-29T06:52:45.674Z</updated>
    
    <content type="html"><![CDATA[<h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><ul><li>采用懒汉式</li><li>使用垃圾回收器自动回收内存</li><li>使用双层锁进行线程同步</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;stdlib.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">std::mutex m;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="built_in">Singleton</span>()&#123;&#125;;</span><br><span class="line"><span class="type">static</span> Singleton* instance;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> data = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="type">static</span> Singleton* <span class="title">getInstance</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">// void Release();</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Deletor</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">~<span class="built_in">Deletor</span>() &#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;now in the Deletor function&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="keyword">if</span>(Singleton::instance != <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">delete</span> Singleton::instance;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">static</span> Deletor deletor;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Singleton::Deletor Singleton::deletor;<span class="comment">//一定要加这段垃圾回收类初始化的代码</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// //此处不能使用析构函数进行内存释放!!</span></span><br><span class="line"><span class="comment">// //问题1</span></span><br><span class="line"><span class="comment">// //本质上instance是在 getInstance中使用new出来的一个对象 </span></span><br><span class="line"><span class="comment">// //所以在程序结束的时候 如果你不对他进行delete </span></span><br><span class="line"><span class="comment">// //它不会主动调用析构函数 这样就会造成内存泄漏</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// //问题2</span></span><br><span class="line"><span class="comment">// //在析构函数中delete进行内存释放的时候</span></span><br><span class="line"><span class="comment">// //会造成递归调用</span></span><br><span class="line"><span class="comment">// void Singleton::Release()</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">// cout&lt;&lt;&quot;DE<span class="doctag">BUG:</span> now in the destructor function &quot;&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">// if(instance != NULL)&#123;</span></span><br><span class="line"><span class="comment">// delete Singleton::instance;</span></span><br><span class="line"><span class="comment">// instance = NULL;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">Singleton* Singleton::instance  = <span class="literal">NULL</span>;</span><br><span class="line"><span class="function">Singleton* <span class="title">Singleton::getInstance</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">cout&lt;&lt;<span class="string">&quot;DEBUG: now in getInstance &quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="keyword">if</span>(instance == <span class="literal">NULL</span>)&#123;</span><br><span class="line">m.<span class="built_in">lock</span>();</span><br><span class="line"><span class="keyword">if</span>(instance == <span class="literal">NULL</span>)&#123;</span><br><span class="line">instance  = <span class="keyword">new</span>  Singleton;</span><br><span class="line">&#125;</span><br><span class="line">m.<span class="built_in">unlock</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt;<span class="string">&quot;the address of instance &quot;</span> &lt;&lt; Singleton::instance&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;Hello world&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Singleton* <span class="title">GetInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span>  Singleton::<span class="built_in">getInstance</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span> ;i&lt;<span class="number">500</span> ; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="function">thread <span class="title">th</span><span class="params">(GetInstance)</span></span>;</span><br><span class="line"></span><br><span class="line">th.<span class="built_in">join</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout&lt;&lt;<span class="string">&quot;LOG: end of main&quot;</span>&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html"> 单例模式的一种简单实现C++</summary>
    
    
    
    <category term="设计模式" scheme="http://example.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="设计模式" scheme="http://example.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>用C++实现简易版vector</title>
    <link href="http://example.com/2022/04/16/%E7%94%A8C++%E5%AE%9E%E7%8E%B0%E7%AE%80%E6%98%93%E7%89%88vector/"/>
    <id>http://example.com/2022/04/16/%E7%94%A8C++%E5%AE%9E%E7%8E%B0%E7%AE%80%E6%98%93%E7%89%88vector/</id>
    <published>2022-04-16T06:30:36.000Z</published>
    <updated>2022-04-29T06:53:00.490Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/KyleAndKelly/miniSTL"> https://github.com/KyleAndKelly/miniSTL</a></p><p>实现一个简易版的Vector</p><ul><li><em>miniVector.h</em></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;assert.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">miniVector</span>&#123;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">             </span><br><span class="line">        T* vectorArr;</span><br><span class="line">        <span class="type">int</span> capacity ;</span><br><span class="line">        <span class="type">int</span> size ;</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">memoryExpand</span><span class="params">(<span class="type">const</span> <span class="type">int</span> elem)</span></span>;</span><br><span class="line">    <span class="keyword">public</span>: </span><br><span class="line">        ~<span class="built_in">miniVector</span>();</span><br><span class="line">        <span class="built_in">miniVector</span>():<span class="built_in">vectorArr</span>(<span class="literal">NULL</span>),<span class="built_in">capacity</span>(<span class="number">2</span>),<span class="built_in">size</span>(<span class="number">0</span>) &#123;&#125;;</span><br><span class="line">        <span class="built_in">miniVector</span>(<span class="type">const</span> <span class="type">int</span> cap);</span><br><span class="line">        <span class="built_in">miniVector</span>(<span class="type">const</span> <span class="type">int</span> ini_size,T ini_data);</span><br><span class="line">        <span class="built_in">miniVector</span>(<span class="type">const</span> miniVector&amp; vec);</span><br><span class="line">        miniVector&amp; <span class="keyword">operator</span>=(<span class="type">const</span> miniVector&amp; vec);</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">push_back</span><span class="params">(<span class="type">const</span> T&amp; num)</span></span>;</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">print_info</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line">        T&amp;  <span class="keyword">operator</span>[](<span class="type">const</span> <span class="type">int</span>&amp; index) <span class="type">const</span>;</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">const</span> <span class="type">int</span>&amp; index,<span class="type">const</span> T&amp; data)</span></span>;</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">pop_back</span><span class="params">()</span></span>;</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">clear</span><span class="params">()</span></span>;</span><br><span class="line">        </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li><p><em>miniVector_Impl.h</em></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;miniVector.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="type">void</span> miniVector&lt;T&gt;::<span class="built_in">memoryExpand</span>(<span class="type">const</span> <span class="type">int</span> elem)&#123;</span><br><span class="line">    </span><br><span class="line">    T* newArr = <span class="keyword">new</span> T[elem*capacity];</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;DEBUG: create newArr success&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="built_in">memcpy</span>(newArr,vectorArr,size*<span class="built_in">sizeof</span>(T));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span>[] vectorArr;</span><br><span class="line">    vectorArr = newArr;</span><br><span class="line">    capacity = elem*capacity;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;DEBUG:  capacity &quot;</span>&lt;&lt; capacity&lt;&lt;endl;     </span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">miniVector&lt;T&gt;::<span class="built_in">miniVector</span>(<span class="type">const</span> <span class="type">int</span> cap)&#123;</span><br><span class="line">    capacity = cap;</span><br><span class="line">    size = <span class="number">0</span>;</span><br><span class="line">    vectorArr = <span class="keyword">new</span> T[capacity];</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;LOG: capcity &quot;</span>&lt;&lt;capacity&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;LOG: size &quot;</span>&lt;&lt;size&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">miniVector&lt;T&gt;::<span class="built_in">miniVector</span>(<span class="type">const</span> <span class="type">int</span> ini_size,T ini_data)&#123;</span><br><span class="line">    </span><br><span class="line">    capacity = <span class="number">20</span>+ini_size;</span><br><span class="line">    size = ini_size;</span><br><span class="line">    vectorArr = <span class="keyword">new</span> T[capacity];</span><br><span class="line">    <span class="comment">// memset(vectorArr, ini_data,ini_size);</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;ini_size;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        vectorArr[i] = ini_data;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;LOG: capcity &quot;</span>&lt;&lt;capacity&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;LOG: size &quot;</span>&lt;&lt;size&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">miniVector&lt;T&gt;::~<span class="built_in">miniVector</span>()&#123;</span><br><span class="line">    <span class="keyword">delete</span>[] vectorArr;</span><br><span class="line">    vectorArr = <span class="literal">NULL</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="type">void</span> miniVector&lt;T&gt;::<span class="built_in">push_back</span>(<span class="type">const</span> T&amp; num)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(vectorArr == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        capacity = <span class="number">2</span>;</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">        vectorArr = <span class="keyword">new</span> T[capacity];</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(size &gt;= capacity)</span><br><span class="line">    &#123;</span><br><span class="line">         <span class="built_in">memoryExpand</span>(<span class="number">2</span>);<span class="comment">//2倍扩容</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    vectorArr[size] = num;</span><br><span class="line">    ++size;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;DEBUG: size=&quot;</span>&lt;&lt;size&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;DEBUG: vectorArr[&quot;</span>&lt;&lt;size<span class="number">-1</span>&lt;&lt;<span class="string">&quot;]=&quot;</span>&lt;&lt;vectorArr[size<span class="number">-1</span>]&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;DEBUG: capacity&quot;</span>&lt;&lt;capacity&lt;&lt;endl;              </span><br><span class="line">    <span class="keyword">return</span>;    </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="type">void</span> miniVector&lt;T&gt;::<span class="built_in">print_info</span>() <span class="type">const</span> </span><br><span class="line">&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;LOG vector capacity: &quot;</span>&lt;&lt; capacity&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;LOG vector size: &quot;</span>&lt;&lt; size&lt;&lt;endl;   </span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;LOG vector data: &quot;</span>; </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> i=<span class="number">0</span>;i&lt;size;i++)&#123;</span><br><span class="line">       cout&lt;&lt;vectorArr[i]&lt;&lt;<span class="string">&quot; &quot;</span>; </span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">T&amp;  miniVector&lt;T&gt;::<span class="keyword">operator</span>[](<span class="type">const</span> <span class="type">int</span>&amp; index) <span class="type">const</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(vectorArr == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;Error: Memory Not Initial!&quot;</span>&lt;&lt;endl;</span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>( index &gt;= size || index &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;Error: Out of Ranger!&quot;</span>&lt;&lt;endl;</span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> vectorArr[index];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="type">void</span> miniVector&lt;T&gt;::<span class="built_in">insert</span>(<span class="type">const</span> <span class="type">int</span>&amp; index,<span class="type">const</span> T&amp; data)&#123;</span><br><span class="line">    <span class="keyword">if</span>(vectorArr == <span class="literal">NULL</span>)<span class="comment">//如果还没有初始化</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;Error: Vector is not Initial!&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(index &gt;= size<span class="number">-1</span>)&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;Error: The insert index should be from 0 to &quot;</span>&lt;&lt;size<span class="number">-1</span>&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(size&gt;=capacity)&#123;</span><br><span class="line">        <span class="built_in">memoryExpand</span>(<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = size<span class="number">-1</span>;i&gt;= index;i--)</span><br><span class="line">    &#123;</span><br><span class="line">        vectorArr[i+<span class="number">1</span>]=vectorArr[i];</span><br><span class="line">    &#125;</span><br><span class="line">    vectorArr[index]= data;</span><br><span class="line">    ++size;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;DEBUG: vectorArr[&quot;</span>&lt;&lt;index&lt;&lt;<span class="string">&quot;]=&quot;</span>&lt;&lt;vectorArr[index]&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="type">void</span> miniVector&lt;T&gt;::<span class="built_in">pop_back</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(vectorArr == <span class="literal">NULL</span> || size == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;Error: Vector size is 0!&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    --size;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;LOG: size &quot;</span>&lt;&lt; size&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;LOG: capacity &quot;</span>&lt;&lt;capacity&lt;&lt;endl;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">miniVector&lt;T&gt;::<span class="built_in">miniVector</span>(<span class="type">const</span> miniVector&amp; vec)&#123;</span><br><span class="line">    <span class="comment">//深拷贝</span></span><br><span class="line"></span><br><span class="line">    capacity = vec.capacity;</span><br><span class="line">    size = vec.size;</span><br><span class="line">    vectorArr = <span class="keyword">new</span> T[capacity];</span><br><span class="line">    <span class="built_in">memcpy</span>(vectorArr,vec.vectorArr,size*<span class="built_in">sizeof</span>(T));</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;LOG: now in miniVector(const miniVector&amp; vec)  &quot;</span>&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;LOG: size &quot;</span>&lt;&lt;size&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;LOG: capacity &quot;</span>&lt;&lt;capacity&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">miniVector&lt;T&gt;&amp; miniVector&lt;T&gt;::<span class="keyword">operator</span>=(<span class="type">const</span> miniVector&amp; vec)&#123;</span><br><span class="line">     <span class="comment">//深拷贝</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span> == &amp;vec) <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    </span><br><span class="line">    capacity = vec.capacity;</span><br><span class="line">    size = vec.size;</span><br><span class="line">    <span class="keyword">delete</span>[] vectorArr;</span><br><span class="line">    vectorArr = <span class="keyword">new</span> T[capacity];</span><br><span class="line">    <span class="built_in">memcpy</span>(vectorArr,vec.vectorArr,size*<span class="built_in">sizeof</span>(T));</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;LOG: now in miniVector operator=  &quot;</span>&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;LOG: size &quot;</span>&lt;&lt;size&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;LOG: capacity &quot;</span>&lt;&lt;capacity&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="type">void</span> miniVector&lt;T&gt;::<span class="built_in">clear</span>()</span><br><span class="line">&#123;</span><br><span class="line">    size=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>mainTest.cpp</em></p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;miniVector_impl.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">miniVectorTest_pushback_int</span><span class="params">()</span></span>&#123;</span><br><span class="line">    miniVector&lt;<span class="type">int</span>&gt; vec;</span><br><span class="line">    vec.<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line">    vec.<span class="built_in">push_back</span>(<span class="number">9</span>);    </span><br><span class="line">    vec.<span class="built_in">push_back</span>(<span class="number">2</span>);    </span><br><span class="line">    vec.<span class="built_in">push_back</span>(<span class="number">4</span>);</span><br><span class="line">    vec.<span class="built_in">push_back</span>(<span class="number">3</span>);    </span><br><span class="line">    vec.<span class="built_in">print_info</span>();</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;DEBUG: vec[2] &quot;</span> &lt;&lt;vec[<span class="number">2</span>]&lt;&lt;endl;</span><br><span class="line">    vec[<span class="number">13</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">miniVectorTest_pushback_char</span><span class="params">()</span></span>&#123;</span><br><span class="line">    miniVector&lt;<span class="type">char</span>&gt; vec;</span><br><span class="line">    vec[<span class="number">1</span>];</span><br><span class="line">    vec.<span class="built_in">push_back</span>(<span class="string">&#x27;h&#x27;</span>);</span><br><span class="line">    vec.<span class="built_in">push_back</span>(<span class="string">&#x27;a&#x27;</span>);    </span><br><span class="line">    vec.<span class="built_in">push_back</span>(<span class="string">&#x27;p&#x27;</span>);    </span><br><span class="line">    vec.<span class="built_in">push_back</span>(<span class="string">&#x27;p&#x27;</span>);</span><br><span class="line">    vec.<span class="built_in">push_back</span>(<span class="string">&#x27;y&#x27;</span>);    </span><br><span class="line">    vec.<span class="built_in">print_info</span>();</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;DEBUG: vec[2] &quot;</span> &lt;&lt;vec[<span class="number">2</span>]&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">miniVectorTest_insert</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">miniVector&lt;<span class="type">int</span>&gt; <span class="title">vec</span><span class="params">(<span class="number">5</span>,<span class="number">2</span>)</span></span>;</span><br><span class="line">    vec.<span class="built_in">insert</span>(<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">    vec.<span class="built_in">print_info</span>();</span><br><span class="line">    vec.<span class="built_in">insert</span>(<span class="number">8</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">miniVectorTest_popback</span><span class="params">()</span></span>&#123;</span><br><span class="line">    miniVector&lt;<span class="type">int</span>&gt; vec;</span><br><span class="line">    vec.<span class="built_in">pop_back</span>();</span><br><span class="line">    <span class="function">miniVector&lt;<span class="type">int</span>&gt; <span class="title">vec1</span><span class="params">(<span class="number">2</span>,<span class="number">3</span>)</span></span>;</span><br><span class="line">    vec.<span class="built_in">pop_back</span>();</span><br><span class="line">    vec.<span class="built_in">pop_back</span>();</span><br><span class="line">    vec.<span class="built_in">pop_back</span>();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">miniVectorTest_copy</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">miniVector&lt;<span class="type">int</span>&gt; <span class="title">vec</span><span class="params">(<span class="number">2</span>,<span class="number">3</span>)</span></span>;</span><br><span class="line">    <span class="function">miniVector&lt;<span class="type">int</span>&gt; <span class="title">vec1</span><span class="params">(vec)</span></span>;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;LOG: vec1[1] &quot;</span>&lt;&lt;vec1[<span class="number">1</span>]&lt;&lt;endl;</span><br><span class="line">    miniVector&lt;<span class="type">int</span>&gt; vec2 = vec1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">miniVectorTest_copyoperator</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">miniVector&lt;<span class="type">int</span>&gt; <span class="title">vec</span><span class="params">(<span class="number">2</span>,<span class="number">3</span>)</span></span>;</span><br><span class="line">    miniVector&lt;<span class="type">int</span>&gt; vec1;</span><br><span class="line">    miniVector&lt;<span class="type">int</span>&gt; vec2;</span><br><span class="line">    vec2=vec1 = vec;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;LOG: vec1[1] &quot;</span>&lt;&lt;vec1[<span class="number">1</span>]&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;LOG: vec2[1] &quot;</span>&lt;&lt;vec2[<span class="number">1</span>]&lt;&lt;endl;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">miniVectorTest_copyoperator</span>();</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html"> 用C++实现简易版的Vector</summary>
    
    
    
    <category term="C++" scheme="http://example.com/categories/C/"/>
    
    
    <category term="C++" scheme="http://example.com/tags/C/"/>
    
  </entry>
  
</feed>
