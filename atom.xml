<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kyle Chen&#39;s Blog</title>
  
  <subtitle>Action speaks louder than Words</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2024-12-08T02:52:41.282Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>陈同学</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Redux の使い方</title>
    <link href="http://example.com/2024/12/08/Redux-%E3%81%AE%E4%BD%BF%E3%81%84%E6%96%B9/"/>
    <id>http://example.com/2024/12/08/Redux-%E3%81%AE%E4%BD%BF%E3%81%84%E6%96%B9/</id>
    <published>2024-12-08T03:52:32.000Z</published>
    <updated>2024-12-08T02:52:41.282Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Redux-の使い方"><a href="#Redux-の使い方" class="headerlink" title="Redux の使い方"></a>Redux の使い方</h2><h3 id="1-Redux-の基本的な概念"><a href="#1-Redux-の基本的な概念" class="headerlink" title="1. Redux の基本的な概念"></a>1. Redux の基本的な概念</h3><p>Redux を使うためには、まず以下の基本的な概念を理解することが重要です：</p><ul><li><strong>Store（ストア）</strong>：アプリケーションの状態が格納される場所。すべてのデータが一元管理されます。</li><li><strong>Action（アクション）</strong>：状態を変更したいときに発行するオブジェクトで、<code>type</code> プロパティと必要に応じて他のデータを含んでいます。</li><li><strong>Reducer（リデューサー）</strong>：アクションが発行されると、リデューサーが新しい状態を生成します。これは純粋な関数で、前の状態とアクションを受け取り、新しい状態を返します。</li><li><strong>Dispatch（ディスパッチ）</strong>：アクションをストアに送る関数。これを使って状態を更新します。</li></ul><h3 id="2-Redux-のインストール"><a href="#2-Redux-のインストール" class="headerlink" title="2. Redux のインストール"></a>2. Redux のインストール</h3><p>まず、React プロジェクトに Redux をインストールします：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install redux react-redux</span><br></pre></td></tr></table></figure><ul><li><code>redux</code> は状態管理のためのライブラリです。</li><li><code>react-redux</code> は React と Redux を接続するためのライブラリです。</li></ul><h3 id="3-Redux-ストアの作成"><a href="#3-Redux-ストアの作成" class="headerlink" title="3. Redux ストアの作成"></a>3. Redux ストアの作成</h3><p>まず、ストアを作成します。ストアは、アプリケーションの状態を管理する中心的な役割を果たします。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// store.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">&#x27;redux&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初期状態</span></span><br><span class="line"><span class="keyword">const</span> initialState = &#123;</span><br><span class="line">  <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// リデューサー関数</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">counterReducer</span> = (<span class="params">state = initialState, action</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.<span class="property">type</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;INCREMENT&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">count</span>: state.<span class="property">count</span> + <span class="number">1</span> &#125;;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;DECREMENT&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">count</span>: state.<span class="property">count</span> - <span class="number">1</span> &#125;;</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ストアを作成</span></span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">createStore</span>(counterReducer);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store;</span><br></pre></td></tr></table></figure><h3 id="4-Action-の定義"><a href="#4-Action-の定義" class="headerlink" title="4. Action の定義"></a>4. Action の定義</h3><p>アクションは、状態の更新を表すオブジェクトです。アクションには少なくとも <code>type</code> プロパティを含める必要があります。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// actions.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">increment</span> = (<span class="params"></span>) =&gt; (&#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&#x27;INCREMENT&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">decrement</span> = (<span class="params"></span>) =&gt; (&#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&#x27;DECREMENT&#x27;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="5-React-コンポーネントで-Redux-ストアを使用する"><a href="#5-React-コンポーネントで-Redux-ストアを使用する" class="headerlink" title="5. React コンポーネントで Redux ストアを使用する"></a>5. React コンポーネントで Redux ストアを使用する</h3><p>React アプリケーションで Redux のストアを使うために、<code>Provider</code> コンポーネントでストアをラップし、アプリ全体にストアを提供します。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Provider</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-redux&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Provider</span> <span class="attr">store</span>=<span class="string">&#123;store&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">App</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">Provider</span>&gt;</span></span>,</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="6-Redux-ステートをコンポーネントで接続"><a href="#6-Redux-ステートをコンポーネントで接続" class="headerlink" title="6. Redux ステートをコンポーネントで接続"></a>6. Redux ステートをコンポーネントで接続</h3><p>React コンポーネントで Redux のステートを使うためには、<code>useSelector</code> を使ってストアからデータを取得し、<code>useDispatch</code> を使ってアクションをディスパッチします。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// App.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useSelector, useDispatch &#125; <span class="keyword">from</span> <span class="string">&#x27;react-redux&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; increment, decrement &#125; <span class="keyword">from</span> <span class="string">&#x27;./actions&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">App</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// Redux ストアから state を取得</span></span><br><span class="line">  <span class="keyword">const</span> count = <span class="title function_">useSelector</span>(<span class="function"><span class="params">state</span> =&gt;</span> state.<span class="property">count</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// アクションをディスパッチする関数</span></span><br><span class="line">  <span class="keyword">const</span> dispatch = <span class="title function_">useDispatch</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Count: &#123;count&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> dispatch(increment())&#125;&gt;Increment<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> dispatch(decrement())&#125;&gt;Decrement<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure><h3 id="7-Redux-の使い方のまとめ"><a href="#7-Redux-の使い方のまとめ" class="headerlink" title="7. Redux の使い方のまとめ"></a>7. Redux の使い方のまとめ</h3><ul><li><strong>Store</strong>：状態を格納する場所。<code>createStore</code> を使って作成します。</li><li><strong>Action</strong>：状態を変更するためにディスパッチされるオブジェクト。<code>type</code> プロパティを含みます。</li><li><strong>Reducer</strong>：状態変更のためのロジック。アクションを受け取り、新しい状態を返します。</li><li><strong>useSelector</strong>：React コンポーネント内で Redux の状態を取得するフック。</li><li><strong>useDispatch</strong>：アクションをストアにディスパッチするフック。</li></ul><p>これで、Redux を使</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Redux-の使い方&quot;&gt;&lt;a href=&quot;#Redux-の使い方&quot; class=&quot;headerlink&quot; title=&quot;Redux の使い方&quot;&gt;&lt;/a&gt;Redux の使い方&lt;/h2&gt;&lt;h3 id=&quot;1-Redux-の基本的な概念&quot;&gt;&lt;a href=&quot;#1-Redu</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>なぜReduxを使用するのか？</title>
    <link href="http://example.com/2024/12/08/%E3%81%AA%E3%81%9CRedux%E3%82%92%E4%BD%BF%E7%94%A8%E3%81%99%E3%82%8B%E3%81%AE%E3%81%8B%EF%BC%9F/"/>
    <id>http://example.com/2024/12/08/%E3%81%AA%E3%81%9CRedux%E3%82%92%E4%BD%BF%E7%94%A8%E3%81%99%E3%82%8B%E3%81%AE%E3%81%8B%EF%BC%9F/</id>
    <published>2024-12-08T03:51:30.000Z</published>
    <updated>2024-12-08T02:51:46.281Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-React-における「ローカルストレージ」の問題"><a href="#1-React-における「ローカルストレージ」の問題" class="headerlink" title="1. React における「ローカルストレージ」の問題"></a>1. React における「ローカルストレージ」の問題</h3><ul><li><p>React のコンポーネント自体には state（状態）があり、これは各部屋にある小さなホワイトボードのようなものです。このホワイトボードはとても便利で、何かを書く（データを保存する）ことも、消す（データを更新する）ことも簡単です。</p></li><li><p>しかし、複数の部屋がこのホワイトボードの内容を共有する必要があると、問題が発生します：</p></li><li><p>例えば、部屋 A に「ユーザーのログイン状態」が書かれている場合、部屋 B もユーザーがログインしているかどうかを知る必要があります。</p></li><li><p>この場合、A 部屋から B 部屋に情報を渡す必要があります（props を使って）。でも、部屋がさらに増えて、A -&gt; B -&gt; C -&gt; D というように、情報を渡し続けるのは非常に面倒です。</p></li></ul><h3 id="2-Redux-が提供する「集中ストレージ」"><a href="#2-Redux-が提供する「集中ストレージ」" class="headerlink" title="2. Redux が提供する「集中ストレージ」"></a>2. Redux が提供する「集中ストレージ」</h3><ul><li><p>Redux の役割は、大きな倉庫を作り、すべての部屋（コンポーネント）が重要な情報をその倉庫に保存できるようにすることです。</p></li><li><p>各部屋が情報を必要とするときは、倉庫から直接取り出すことができ、情報を一つ一つ渡す必要はありません。</p></li><li><p>簡単な例を挙げてみましょう：</p></li><li><p>あなたがコンビニを経営しているとしましょう。</p></li><li><p>React の state の方法は、各レジ係（コンポーネント）が自分の現在の収支を記録することです。</p></li><li><p>しかし、コンビニ全体の総収入を集計する場合、すべてのレジ係の記録を持ってきて、1つ1つ加算しなければなりません。</p></li><li><p>Redux の方法では、すべてのレジ係（コンポーネント）が同じ帳簿（Redux 倉庫）に記帳します。そして、総収入を知りたいときは、帳簿を確認すれば良いのです。</p></li></ul><h3 id="3-Redux-の核心機能"><a href="#3-Redux-の核心機能" class="headerlink" title="3. Redux の核心機能"></a>3. Redux の核心機能</h3><ul><li><p>Redux はいくつかのシンプルで強力な機能を提供します：</p></li><li><p><strong>統一ストレージ（Store）</strong>：中央の倉庫のようなもので、すべてのデータがここで一元管理されます。</p></li><li><p><strong>アクション（Action）</strong>：倉庫のデータを更新したい場合は、「アクション」を発行する必要があります。これは、何を変更するかを示す申請書のようなものです。</p></li><li><p><strong>リデューサー（Reducer）</strong>：すべての更新は事前に定められたルールに従って行われ、各変更が予測可能で管理可能であることを保証します。</p></li></ul><h3 id="4-Redux-を使った実際のプロジェクトでの利点"><a href="#4-Redux-を使った実際のプロジェクトでの利点" class="headerlink" title="4. Redux を使った実際のプロジェクトでの利点"></a>4. Redux を使った実際のプロジェクトでの利点</h3><ul><li><p>例えば、あなたが eコマースサイトを開発しているとしましょう。以下の機能があります：</p></li><li><p>ユーザーがログインした後、ショッピングカートにはユーザーのアイテム数が表示されます。</p></li><li><p>他のページ（例えば、注文ページ）でも、ユーザーのログイン状態やカートの内容を知る必要があります。</p></li><li><p>ユーザーがカートページで商品を追加した場合、決済ページにもすぐにそのデータを更新しなければなりません。</p></li><li><p>もし Redux を使わない場合、次のようにする必要があります：</p></li><li><p>ショッピングカートページで state を更新します。</p></li><li><p>その後、props を使ってデータを結算ページに渡します。</p></li><li><p>しかし、Redux を使うと、次のように簡単になります：</p></li><li><p>ショッピングカートページで「商品を追加する」というアクション（Action）を送信します。</p></li><li><p>Redux はそのアクションに基づいて倉庫のデータを更新します（Reducer）。</p></li><li><p>他のページ（例えば、決済ページ）は自動的に最新のデータを取得します。なぜなら、それらは直接倉庫に接続しているからです（connect を通じて）。</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-React-における「ローカルストレージ」の問題&quot;&gt;&lt;a href=&quot;#1-React-における「ローカルストレージ」の問題&quot; class=&quot;headerlink&quot; title=&quot;1. React における「ローカルストレージ」の問題&quot;&gt;&lt;/a&gt;1. Reac</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Reactのカスタムフックについて</title>
    <link href="http://example.com/2024/12/08/React%E3%81%AE%E3%82%AB%E3%82%B9%E3%82%BF%E3%83%A0%E3%83%95%E3%83%83%E3%82%AF%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/"/>
    <id>http://example.com/2024/12/08/React%E3%81%AE%E3%82%AB%E3%82%B9%E3%82%BF%E3%83%A0%E3%83%95%E3%83%83%E3%82%AF%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/</id>
    <published>2024-12-08T03:50:32.000Z</published>
    <updated>2024-12-08T02:50:43.308Z</updated>
    
    <content type="html"><![CDATA[<h2 id="カスタムフック"><a href="#カスタムフック" class="headerlink" title="カスタムフック"></a>カスタムフック</h2><h3 id="紹介"><a href="#紹介" class="headerlink" title="紹介"></a>紹介</h3><ul><li>Reactでは、<strong>カスタムフック</strong>を作成することで、複雑なロジックを再利用可能な関数として抽象化できます。</li><li>カスタムフックは、<code>useState</code>や<code>useEffect</code>などのReactのフックを組み合わせて、状態管理や副作用の処理を行うカスタムのフックを作成します。</li></ul><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><p>カスタムフックは通常、<code>use</code>で始まる名前を付ける必要があります。これにより、Reactがそれがフックであることを認識します。</p><h4 id="例-カスタムフック-useLocalStorage"><a href="#例-カスタムフック-useLocalStorage" class="headerlink" title="例: カスタムフック useLocalStorage"></a>例: カスタムフック <code>useLocalStorage</code></h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">import &#123; useState &#125; from &#x27;react&#x27;;</span><br><span class="line"></span><br><span class="line">// カスタムフックの定義</span><br><span class="line">function useLocalStorage(key, initialValue) &#123;</span><br><span class="line">  // ローカルストレージから値を取得</span><br><span class="line">  const saved = localStorage.getItem(key);</span><br><span class="line">  const initial = saved ? JSON.parse(saved) : initialValue;</span><br><span class="line">  </span><br><span class="line">  const [value, setValue] = useState(initial);</span><br><span class="line"></span><br><span class="line">  // 状態が更新された時にローカルストレージも更新</span><br><span class="line">  const setStoredValue = (newValue) =&gt; &#123;</span><br><span class="line">    setValue(newValue);</span><br><span class="line">    localStorage.setItem(key, JSON.stringify(newValue));</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  return [value, setStoredValue];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function Example() &#123;</span><br><span class="line">  const [name, setName] = useLocalStorage(&#x27;name&#x27;, &#x27;John Doe&#x27;);</span><br><span class="line"></span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h1&gt;こんにちは、&#123;name&#125;!&lt;/h1&gt;</span><br><span class="line">      &lt;button onClick=&#123;() =&gt; setName(&#x27;Alice&#x27;)&#125;&gt;名前を変更&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="特徴"><a href="#特徴" class="headerlink" title="特徴"></a>特徴</h3><ul><li>カスタムフックは再利用可能なロジックの集約であり、複数のコンポーネントで同じロジックを使いたい場合に便利です。</li><li>フックの内部でuseStateやuseEffectを使い、状態や副作用を管理できます。</li><li>カスタムフックはコンポーネントに依存せず、どのコンポーネントでも使えるため、コードの重複を減らすのに役立ちます。<h3 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h3></li><li>カスタムフックは通常、コンポーネントの外で定義し、コンポーネント内で使用します。</li><li>カスタムフックもReactのルールに従い、コンポーネント内のトップレベルで使用する必要があります。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;カスタムフック&quot;&gt;&lt;a href=&quot;#カスタムフック&quot; class=&quot;headerlink&quot; title=&quot;カスタムフック&quot;&gt;&lt;/a&gt;カスタムフック&lt;/h2&gt;&lt;h3 id=&quot;紹介&quot;&gt;&lt;a href=&quot;#紹介&quot; class=&quot;headerlink&quot; title=&quot;紹</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>ReactのuseRefについて</title>
    <link href="http://example.com/2024/12/08/React%E3%81%AEuseRef%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/"/>
    <id>http://example.com/2024/12/08/React%E3%81%AEuseRef%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/</id>
    <published>2024-12-08T03:49:50.000Z</published>
    <updated>2024-12-08T02:49:56.799Z</updated>
    
    <content type="html"><![CDATA[<h2 id="useRefとは"><a href="#useRefとは" class="headerlink" title="useRefとは"></a>useRefとは</h2><h3 id="紹介"><a href="#紹介" class="headerlink" title="紹介"></a>紹介</h3><ul><li><code>useRef</code> は React の Hook の一つで、関数コンポーネント内で参照（reference）を作成するために使用されます。</li><li>通常、DOM要素にアクセスしたいときに使われますが、状態の管理にも使用することができます。<code>useRef</code> はコンポーネントの再レンダリングをトリガーしません。</li></ul><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><ul><li><code>useRef</code> を使うと、DOM要素に対して直接アクセスできる「ref」を作成することができます。</li><li><code>useRef</code> はオブジェクトを返し、その <code>current</code> プロパティを通じて参照したい要素にアクセスできます。</li></ul><pre><code class="react">import React, &#123; useRef &#125; from &#39;react&#39;;function Example() &#123;  const inputRef = useRef(null);  const focusInput = () =&gt; &#123;    inputRef.current.focus();  &#125;;  return (    &lt;div&gt;      &lt;input ref=&#123;inputRef&#125; type=&quot;text&quot; /&gt;      &lt;button onClick=&#123;focusInput&#125;&gt;Focus the input&lt;/button&gt;    &lt;/div&gt;  );&#125;### 特徴- useRef の値は再レンダリングを引き起こしません。- コンポーネントが再レンダリングされても、ref の値は保持されます。- 状態としての管理には useState を使用し、useRef は主に DOM 操作やその他の参照を管理するために使用されます。</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;useRefとは&quot;&gt;&lt;a href=&quot;#useRefとは&quot; class=&quot;headerlink&quot; title=&quot;useRefとは&quot;&gt;&lt;/a&gt;useRefとは&lt;/h2&gt;&lt;h3 id=&quot;紹介&quot;&gt;&lt;a href=&quot;#紹介&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>ReactのコンポーネントとuseStateについて</title>
    <link href="http://example.com/2024/12/08/React%E3%81%AE%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E3%81%A8useState%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/"/>
    <id>http://example.com/2024/12/08/React%E3%81%AE%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E3%81%A8useState%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/</id>
    <published>2024-12-08T03:49:09.000Z</published>
    <updated>2024-12-08T02:49:22.264Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/KyleAndKelly/ReactStepByStep/tree/main/react-basic">https://github.com/KyleAndKelly/ReactStepByStep/tree/main/react-basic</a></p><h2 id="Reactのコンポーネント"><a href="#Reactのコンポーネント" class="headerlink" title="Reactのコンポーネント"></a>Reactのコンポーネント</h2><h3 id="紹介"><a href="#紹介" class="headerlink" title="紹介"></a>紹介</h3><ul><li>コンポーネントはユーザーインターフェースの一部であり、独自のロジックと外観を持つことができます。コンポーネント同士は入れ子にしたり、複数回再利用したりすることができます。</li><li>コンポーネントベースの開発により、開発者は積み木を組み立てるように、大規模なアプリケーションを構築できます。</li><li><img src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3916068/a09acfc3-42f2-31a9-0423-998737a9087f.png" alt="image.png"></li></ul><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><ul><li><p>Reactでは、コンポーネントとは頭文字が大文字の関数であり、その内部にコンポーネントのロジックとUI（ユーザーインターフェース）が含まれています。コンポーネントをレンダリングするには、タグとして記述するだけで済みます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">function Son1(props) &#123;</span><br><span class="line">   console.log(props.name)</span><br><span class="line">   console.log(props.age)</span><br><span class="line">   console.log(props.isTrue)</span><br><span class="line">   console.log(props.list)</span><br><span class="line">   console.log(props.obj)</span><br><span class="line">   console.log(props.funct)</span><br><span class="line">   console.log(props.child)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function Son2(props) &#123;</span><br><span class="line">  console.log(props.children)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function Son3(&#123;onGetMsg&#125;)&#123;</span><br><span class="line">  const  sonMsg = &quot;hello bro&quot;</span><br><span class="line">  onGetMsg(sonMsg)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function Son4(props)&#123;</span><br><span class="line">  console.log(&quot;now in Son4&quot;)</span><br><span class="line">  console.log(props.msg)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function Son5()&#123;</span><br><span class="line">  return (  &lt;Son6/&gt;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="ReactのuseState"><a href="#ReactのuseState" class="headerlink" title="ReactのuseState"></a>ReactのuseState</h2><h3 id="紹介-1"><a href="#紹介-1" class="headerlink" title="紹介"></a>紹介</h3></li><li><p>useStateはReactのHook（関数）で、コンポーネントに状態変数を追加することを可能にします。これにより、コンポーネントのレンダリング結果を制御できます。</p></li><li><p>通常のJavaScript変数とは異なり、状態変数が変更されるとコンポーネントのUIもそれに応じて更新されます（データ駆動のビュー）。<br><img src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3916068/966d8055-b73c-eb54-a4a1-c35b9314928e.png" alt="image.png"></p><h3 id="使用方法-1"><a href="#使用方法-1" class="headerlink" title="使用方法"></a>使用方法</h3></li><li><p>useStateは関数であり、戻り値は配列です。</p></li><li><p>配列の1つ目の要素は状態変数、2つ目の要素は状態変数を変更するためのset関数です。</p></li><li><p>useStateの引数は<code>count</code>の初期値として使用されます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const [count, setState] = React.useState(0)</span><br></pre></td></tr></table></figure></li><li><p>Reactでは、状態は読み取り専用と見なされ、常に置き換える必要があります。直接状態を変更してもビューの更新は引き起こされません。</p></li></ul> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const updateCount = ()=&gt;&#123;</span><br><span class="line">  // count++ //not work</span><br><span class="line">  setState(count+2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://github.com/KyleAndKelly/ReactStepByStep/tree/main/react-basic&quot;&gt;https://github.com/KyleAndKelly/ReactStepByStep/tree/main</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>ReactのuseEffectについて</title>
    <link href="http://example.com/2024/12/08/React%E3%81%AEuseEffect%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/"/>
    <id>http://example.com/2024/12/08/React%E3%81%AEuseEffect%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/</id>
    <published>2024-12-08T03:48:19.000Z</published>
    <updated>2024-12-08T02:48:30.051Z</updated>
    
    <content type="html"><![CDATA[<h2 id="インターフェース説明"><a href="#インターフェース説明" class="headerlink" title="インターフェース説明"></a>インターフェース説明</h2><ul><li><p>useEffectはReactのHook関数であり、Reactコンポーネント内でイベントによるものではなく、レンダリングそのものによって引き起こされる操作（副作用）を作成するために使用されます。たとえば、AJAXリクエストの送信やDOMの変更などが含まれます。</p></li><li><p>ページのレンダリング後、またはページ内のコンポーネントに変化があった際に実行される操作として理解できます。</p></li><li><p>第1引数は関数で、副作用関数と呼ぶことができます。この関数内に実行したい操作を記述します。  </p></li><li><p>第2引数は配列（省略可能）で、この配列に依存項を指定します。異なる依存項が第1引数の関数の実行に影響を与えます。配列が空の場合、副作用関数はコンポーネントのレンダリング後に一度だけ実行されます。</p></li></ul><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p><img src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3916068/f58f7a36-3b4d-9b68-d877-e6d065148967.png" alt="image.png"></p><p><img src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3916068/98bb078f-6886-d815-b5ab-4257a478f0a0.png" alt="image.png"></p><p><img src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3916068/1d5f230a-a3d5-2737-0d9e-aa23a1137df0.png" alt="image.png"></p><p><img src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3916068/195072ff-3f6d-bd6a-7724-19229d0fcf28.png" alt="image.png"></p><h2 id="依存項"><a href="#依存項" class="headerlink" title="依存項"></a>依存項</h2><ul><li>useEffectの副作用関数が実行されるタイミングは、指定された依存項によって異なります。</li><li>依存項    副作用関数の実行タイミング</li><li>依存項なし    コンポーネント初期レンダリング＋更新時</li><li>空の配列    初期レンダリング時に1回のみ実行</li><li>特定の依存項あり    初期レンダリング＋依存項が変化した時</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;インターフェース説明&quot;&gt;&lt;a href=&quot;#インターフェース説明&quot; class=&quot;headerlink&quot; title=&quot;インターフェース説明&quot;&gt;&lt;/a&gt;インターフェース説明&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;useEffectはReactのHook関数であり、Rea</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>React 使用して、コメント欄の機能を作成する</title>
    <link href="http://example.com/2024/12/08/React-%E4%BD%BF%E7%94%A8%E3%81%97%E3%81%A6%E3%80%81%E3%82%B3%E3%83%A1%E3%83%B3%E3%83%88%E6%AC%84%E3%81%AE%E6%A9%9F%E8%83%BD%E3%82%92%E4%BD%9C%E6%88%90%E3%81%99%E3%82%8B/"/>
    <id>http://example.com/2024/12/08/React-%E4%BD%BF%E7%94%A8%E3%81%97%E3%81%A6%E3%80%81%E3%82%B3%E3%83%A1%E3%83%B3%E3%83%88%E6%AC%84%E3%81%AE%E6%A9%9F%E8%83%BD%E3%82%92%E4%BD%9C%E6%88%90%E3%81%99%E3%82%8B/</id>
    <published>2024-12-08T03:46:55.000Z</published>
    <updated>2024-12-08T02:47:15.151Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-コメントリストのレンダリング"><a href="#1-コメントリストのレンダリング" class="headerlink" title="1. コメントリストのレンダリング"></a>1. コメントリストのレンダリング</h2><h3 id="1-1-useState-を使用してコメントリストを管理"><a href="#1-1-useState-を使用してコメントリストを管理" class="headerlink" title="1.1. useState を使用してコメントリストを管理"></a>1.1. <code>useState</code> を使用してコメントリストを管理</h3><p><code>useState</code> を利用してコメントリストを管理します。</p><h3 id="1-2-map-メソッドを使ってリストデータを繰り返し処理し、レンダリング"><a href="#1-2-map-メソッドを使ってリストデータを繰り返し処理し、レンダリング" class="headerlink" title="1.2. map メソッドを使ってリストデータを繰り返し処理し、レンダリング"></a>1.2. <code>map</code> メソッドを使ってリストデータを繰り返し処理し、レンダリング</h3><p><code>map</code> メソッドを使用して、リスト内のデータをレンダリングします。</p><hr><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">const defaultList = [</span><br><span class="line">  &#123;</span><br><span class="line">    rpid: 3,</span><br><span class="line">    user: &#123;</span><br><span class="line">      uid: &#x27;13258165&#x27;,</span><br><span class="line">      avatar: &#x27;&#x27;,</span><br><span class="line">      uname: &#x27;Jack&#x27;,</span><br><span class="line">    &#125;,</span><br><span class="line">    content: &#x27;jjjjjjj&#x27;,</span><br><span class="line">    ctime: &#x27;10-18 08:15&#x27;,</span><br><span class="line">    like: 88,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    rpid: 2,</span><br><span class="line">    user: &#123;</span><br><span class="line">      uid: &#x27;36080105&#x27;,</span><br><span class="line">      avatar: &#x27;&#x27;,</span><br><span class="line">      uname: &#x27;Tom&#x27;,</span><br><span class="line">    &#125;,</span><br><span class="line">    content: &#x27;ttttttt&#x27;,</span><br><span class="line">    ctime: &#x27;11-13 11:29&#x27;,</span><br><span class="line">    like: 88,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    rpid: 1,</span><br><span class="line">    user: &#123;</span><br><span class="line">      uid: &#x27;30009257&#x27;,</span><br><span class="line">      avatar,</span><br><span class="line">      uname: &#x27;Kelly&#x27;,</span><br><span class="line">    &#125;,</span><br><span class="line">    content: &#x27;kkkkkkkkk&#x27;,</span><br><span class="line">    ctime: &#x27;10-19 09:00&#x27;,</span><br><span class="line">    like: 66,</span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  function CommentItemList() &#123;</span><br><span class="line">        </span><br><span class="line">    return  commentList.map(item=&gt;&lt;div className=&quot;reply-item&quot; key = &#123;item.user.uid&#125;&gt;</span><br><span class="line">    &#123;/* 头像 */&#125;</span><br><span class="line">    &lt;div className=&quot;root-reply-avatar&quot;&gt;</span><br><span class="line">      &lt;div className=&quot;bili-avatar&quot;&gt;</span><br><span class="line">        &lt;img</span><br><span class="line">          className=&quot;bili-avatar-img&quot;</span><br><span class="line">          alt=&quot;&quot;</span><br><span class="line">        /&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div className=&quot;content-wrap&quot;&gt;</span><br><span class="line">      &#123;/* 用户名 */&#125;</span><br><span class="line">      &lt;div className=&quot;user-info&quot;&gt;</span><br><span class="line">        &lt;div className=&quot;user-name&quot;&gt;&#123;item.user.uname&#125;&lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &#123;/* 评论内容 */&#125;</span><br><span class="line">      &lt;div className=&quot;root-reply&quot;&gt;</span><br><span class="line">        &lt;span className=&quot;reply-content&quot;&gt;&#123;item.content&#125;&lt;/span&gt;</span><br><span class="line">        &lt;div className=&quot;reply-info&quot;&gt;</span><br><span class="line">          &#123;/* 评论时间 */&#125;</span><br><span class="line">          &lt;span className=&quot;reply-time&quot;&gt;&#123;item.ctime&#125;&lt;/span&gt;</span><br><span class="line">          &#123;/* 评论数量 */&#125;</span><br><span class="line">          &lt;span className=&quot;reply-time&quot;&gt;点赞数:&#123;item.like&#125;&lt;/span&gt;</span><br><span class="line">          &#123;item.user.uid !== user.uid &amp;&amp; &lt;span className=&quot;delete-btn&quot; onClick=&#123;()=&gt;onDeletClicked(item.user.uid)&#125;&gt;</span><br><span class="line">            删除</span><br><span class="line">          &lt;/span&gt;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;div className=&quot;reply-list&quot;&gt;</span><br><span class="line">    &lt;CommentItemList/&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-コメント削除機能"><a href="#2-コメント削除機能" class="headerlink" title="2. コメント削除機能"></a>2. コメント削除機能</h2><h3 id="要件"><a href="#要件" class="headerlink" title="要件"></a>要件</h3><ol><li>自分のコメントにのみ削除ボタンを表示する。  </li><li>削除ボタンをクリックすると、そのコメントを削除し、リストから非表示にする。</li></ol><h3 id="コアのアイデア"><a href="#コアのアイデア" class="headerlink" title="コアのアイデア"></a>コアのアイデア</h3><ol><li><strong>削除ボタンの表示</strong> - 条件付きレンダリングを使用して、自分のコメントにだけ削除ボタンを表示します。  </li><li><strong>削除機能</strong> - 現在のコメントの <code>id</code> を取得し、<code>filter</code> を使ってリストから該当するコメントを削除します。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">function onDeletClicked(userId)&#123;</span><br><span class="line">  console.log(userId)</span><br><span class="line">  console.log(userId)</span><br><span class="line">  const  newCommentList = commentList.filter(item=&gt;item.user.uid!==userId)</span><br><span class="line">  setCommentList(newCommentList)</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;span className=&quot;reply-time&quot;&gt;点赞数:&#123;item.like&#125;&lt;/span&gt;</span><br><span class="line">        &#123;item.user.uid !== user.uid &amp;&amp; &lt;span className=&quot;delete-btn&quot; onClick=&#123;()=&gt;onDeletClicked(item.user.uid)&#125;&gt;</span><br><span class="line">          删除</span><br><span class="line">&lt;/span&gt;&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="3-ナビゲーションタブのレンダリングとハイライトの実装"><a href="#3-ナビゲーションタブのレンダリングとハイライトの実装" class="headerlink" title="3. ナビゲーションタブのレンダリングとハイライトの実装"></a>3. ナビゲーションタブのレンダリングとハイライトの実装</h2><h3 id="要件-1"><a href="#要件-1" class="headerlink" title="要件"></a>要件</h3><p>クリックしたタブをハイライト表示します。</p><h3 id="コアのアイデア-1"><a href="#コアのアイデア-1" class="headerlink" title="コアのアイデア"></a>コアのアイデア</h3><ol><li>クリックされたタブの <code>type</code>（一意の識別子）を記録します。  </li><li>タブをレンダリングする際、現在のタブの <code>type</code> と比較し、一致した場合にハイライト用のクラスを追加します。</li></ol><hr><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">const tabs = [</span><br><span class="line">  &#123; type: &#x27;hot&#x27;, text: &#x27;最热&#x27; &#125;,</span><br><span class="line">  &#123; type: &#x27;time&#x27;, text: &#x27;最新&#x27; &#125;,</span><br><span class="line">]</span><br><span class="line">  </span><br><span class="line">  const [navList, setNavList] = React.useState(tabs) </span><br><span class="line">  </span><br><span class="line">  function onNavItemClick(type)&#123;</span><br><span class="line">    setType(type)</span><br><span class="line">    let sortedCommentList</span><br><span class="line">    if(type===&#x27;hot&#x27;)&#123;</span><br><span class="line">      sortedCommentList = commentList.slice().sort((a, b) =&gt; b.like - a.like)</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">      sortedCommentList = commentList.slice().sort((a, b) =&gt; &#123;</span><br><span class="line">        return new Date(b.ctime) - new Date(a.ctime);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    setCommentList(sortedCommentList)</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  function NavListItemList() &#123;</span><br><span class="line">    return navList.map(</span><br><span class="line">      item=&gt;</span><br><span class="line">      &lt;span </span><br><span class="line">      className=&#123;`nav-item $&#123;currrentNavType === item.type&amp;&amp; &#x27;active&#x27; &#125;&#125;` &#125; </span><br><span class="line">      onClick=&#123;()=&gt;onNavItemClick(item.type)&#125;  </span><br><span class="line">      key=&#123;item.type&#125;&gt;</span><br><span class="line">      &#123;item.text&#125;</span><br><span class="line">      &lt;/span&gt;)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="4-コメントリストの並び替え機能"><a href="#4-コメントリストの並び替え機能" class="headerlink" title="4. コメントリストの並び替え機能"></a>4. コメントリストの並び替え機能</h2><h3 id="要件-2"><a href="#要件-2" class="headerlink" title="要件"></a>要件</h3><p>コメントリストに並び替え機能を追加します。<br>並び替え基準として「<code>like</code> 数」や「<code>ctime</code>」などを選択可能にします。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">function onNavItemClick(type)&#123;</span><br><span class="line">  setType(type)</span><br><span class="line">  let sortedCommentList</span><br><span class="line">  if(type===&#x27;hot&#x27;)&#123;</span><br><span class="line">    sortedCommentList = commentList.slice().sort((a, b) =&gt; b.like - a.like)</span><br><span class="line">    setCommentList()</span><br><span class="line">  &#125;else&#123;</span><br><span class="line">    sortedCommentList = commentList.slice().sort((a, b) =&gt; &#123;</span><br><span class="line">      return new Date(b.ctime) - new Date(a.ctime);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  setCommentList(sortedCommentList)</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-コメントリストのレンダリング&quot;&gt;&lt;a href=&quot;#1-コメントリストのレンダリング&quot; class=&quot;headerlink&quot; title=&quot;1. コメントリストのレンダリング&quot;&gt;&lt;/a&gt;1. コメントリストのレンダリング&lt;/h2&gt;&lt;h3 id=&quot;1-1-use</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>【ArticleHub-Project-ノート】02-Loginページの開発</title>
    <link href="http://example.com/2024/11/24/%E3%80%90ArticleHub-Project-%E3%83%8E%E3%83%BC%E3%83%88%E3%80%9102-Login%E3%83%9A%E3%83%BC%E3%82%B8%E3%81%AE%E9%96%8B%E7%99%BA/"/>
    <id>http://example.com/2024/11/24/%E3%80%90ArticleHub-Project-%E3%83%8E%E3%83%BC%E3%83%88%E3%80%9102-Login%E3%83%9A%E3%83%BC%E3%82%B8%E3%81%AE%E9%96%8B%E7%99%BA/</id>
    <published>2024-11-23T16:36:59.000Z</published>
    <updated>2024-11-24T02:56:53.757Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/KyleAndKelly/ArticleHub">https://github.com/KyleAndKelly/ArticleHub</a></p><h3 id="baseURL設定"><a href="#baseURL設定" class="headerlink" title="baseURL設定"></a>baseURL設定</h3><p><strong>目標</strong>：認証コードでのログインを実現し、バックエンドで認証コードをデフォルトで「246810」に設定する。</p><p><strong>理由</strong>：SMSインターフェースは無料ではないため、攻撃者による悪意ある利用を防ぐ。</p><p><strong>手順</strong>：</p><ol><li><p><code>utils/request.js</code> にて <code>axios</code> のリクエスト基準アドレス（baseURL）を設定する。</p><p><strong>目的</strong>：共通のプレフィックスアドレスを抽出し、設定後は <code>axios</code> リクエスト時に常に <code>baseURL + url</code> となる。</p></li><li><p>電話番号と認証コードのデータを収集する。</p></li><li><p><code>axios</code> を使用して認証コードログインAPIを呼び出す。</p></li><li><p>Bootstrap の Alert 警告フレームを使用して結果をユーザーにフィードバックする。</p></li></ol><p><img src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3916068/1ec31e56-31a5-953e-ee0c-c461a8d77822.png" alt="image.png"></p><hr><h3 id="token設定"><a href="#token設定" class="headerlink" title="token設定"></a>token設定</h3><p><strong>概念</strong>：アクセス権限のトークンで、本質的には一連の文字列。</p><p><strong>作成</strong>：ログインが正しく行われた後、バックエンドがトークンを発行して返す。</p><p><strong>目的</strong>：ログイン状態などを判断し、アクセス権限を制御する。</p><p><strong>注意点</strong>：フロントエンドではトークンの有無しか判断できず、有効性はバックエンドが判断する。</p><p><strong>使用方法</strong>：</p><ol><li><p><code>utils/auth.js</code> でトークン文字列がない場合、強制的にログインページにリダイレクトする（アドレスバーを手動で変更してテスト）。</p></li><li><p>ログイン成功後、トークン文字列をローカルに保存し、ホームページにリダイレクトする（アドレスバーを手動で変更してテスト）。</p></li></ol><p><img src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3916068/c8a26f43-3394-46f3-a04c-f5b8587258b3.png" alt="image.png"></p><hr><h3 id="axios-インターセプター"><a href="#axios-インターセプター" class="headerlink" title="axios インターセプター"></a>axios インターセプター</h3><p><strong>要件</strong>：ユーザー名を設定する。</p><p><strong>構文</strong>：<code>axios</code> の <code>headers</code> オプションでリクエストヘッダーのパラメーターを渡せる。</p><p><strong>問題</strong>：多くのAPIでトークン文字列を持たせる必要がある。</p><p><strong>解決</strong>：リクエストインターセプターで共通の <code>headers</code> オプションを一括設定する。</p><p><strong>axios リクエストインターセプター</strong>：リクエストを送信する前に発動する設定関数で、リクエストパラメーターを追加で設定する。</p><p><img src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3916068/57afe70c-8d95-7dc8-4b40-740545775b28.png" alt="image.png"></p><hr><p><strong>axios レスポンスインターセプター</strong>：レスポンスが <code>then</code>&#x2F;<code>catch</code> に到達する前に発動するインターセプション関数で、レスポンス結果を一括で処理する。</p><p>例えば：認証失敗の場合、一括判断して処理を行う。</p><p><img src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3916068/1396bbb4-ef48-af95-9ffe-e29b75ffb62c.png" alt="image.png"></p>]]></content>
    
    
    <summary type="html"> </summary>
    
    
    
    <category term="Notes" scheme="http://example.com/categories/Notes/"/>
    
    
    <category term="Notes" scheme="http://example.com/tags/Notes/"/>
    
  </entry>
  
  <entry>
    <title>【ArticleHub Project ノート】03.Publishページの開発</title>
    <link href="http://example.com/2024/11/24/%E3%80%90ArticleHub-Project-%E3%83%8E%E3%83%BC%E3%83%88%E3%80%9103-Publish%E3%83%9A%E3%83%BC%E3%82%B8%E3%81%AE%E9%96%8B%E7%99%BA/"/>
    <id>http://example.com/2024/11/24/%E3%80%90ArticleHub-Project-%E3%83%8E%E3%83%BC%E3%83%88%E3%80%9103-Publish%E3%83%9A%E3%83%BC%E3%82%B8%E3%81%AE%E9%96%8B%E7%99%BA/</id>
    <published>2024-11-23T16:36:59.000Z</published>
    <updated>2024-11-24T03:07:54.981Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/KyleAndKelly/ArticleHub">https://github.com/KyleAndKelly/ArticleHub</a></p><h2 id="pubishページ"><a href="#pubishページ" class="headerlink" title="pubishページ"></a>pubishページ</h2><h3 id="リッチテキストエディター"><a href="#リッチテキストエディター" class="headerlink" title="リッチテキストエディター"></a>リッチテキストエディター</h3><p><strong>リッチテキスト</strong>：スタイルや多様なフォーマットを含むテキストで、フロントエンドではタグとインラインスタイルを組み合わせて実現される。</p><p><strong>リッチテキストエディター</strong>：リッチテキストコンテンツを作成するためのコンテナ。</p><p><strong>目標</strong>：記事投稿ページにリッチテキストエディターを統合する。</p><p><strong>使用</strong>：<code>wangEditor</code> プラグイン。</p><p><strong>手順</strong>：</p><ol><li>CSS を導入してスタイルを定義。</li><li>HTML 構造を定義。</li><li>JS を導入してエディターを作成。</li><li>内容変更を監視し、隠しテキストエリアに保存（後でデータ収集しやすいように）。</li></ol><p><img src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3916068/ce20b5cc-aa63-cab1-7bf3-1f72d587a0f2.png" alt="image.png"></p><hr><h3 id="チャンネルリスト"><a href="#チャンネルリスト" class="headerlink" title="チャンネルリスト"></a>チャンネルリスト</h3><p><strong>目標</strong>：チャンネルリストを表示し、ユーザーが選択できるようにする。</p><p><strong>手順</strong>：</p><ol><li>チャンネルリストのデータを取得する。</li><li>ドロップダウンメニューに表示する。</li></ol><p><img src="C:\Users\Kyle\AppData\Roaming\Typora\typora-user-images\image-20241124112044365.png" alt="image-20241124112044365"></p><hr><h3 id="カバー設定"><a href="#カバー設定" class="headerlink" title="カバー設定"></a>カバー設定</h3><p><strong>目標</strong>：記事のカバーを設定する。</p><p><strong>手順</strong>：</p><ol><li>タグ構造とスタイルを準備。</li><li>ファイルを選択して <code>FormData</code> に保存。</li><li>画像を個別にアップロードし、画像の URL アドレスを取得。</li><li>プレビューし、<code>img</code> タグで表示（「+」アイコンのアップロードタグを非表示にする）。</li></ol><p><strong>注意</strong>：画像の URL アドレスは一時的に <code>img</code> タグに保存され、記事との関連付けはまだ行われていない。</p><h2 id=""><a href="#" class="headerlink" title=""></a><img src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3916068/4c20ed36-855b-1757-823a-41095255f3a6.png" alt="image.png"></h2><h3 id="データ収集と保存"><a href="#データ収集と保存" class="headerlink" title="データ収集と保存"></a>データ収集と保存</h3><p><strong>目標</strong>：記事内容を収集し、保存する。</p><p><strong>手順</strong>：</p><ol><li><code>form-serialize</code> プラグインを使用してフォームデータを収集する。</li><li><code>axios</code> を使用してサーバーに送信し、保存する。</li><li><code>Alert</code> 警告フレームを呼び出して結果をユーザーにフィードバック。</li><li>フォームをリセットし、リストページにリダイレクトする。<br><img src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3916068/5505199f-5b31-0527-446c-f6aa767acdf0.png" alt="image.png"></li></ol>]]></content>
    
    
    <summary type="html"> </summary>
    
    
    
    <category term="Notes" scheme="http://example.com/categories/Notes/"/>
    
    
    <category term="Notes" scheme="http://example.com/tags/Notes/"/>
    
  </entry>
  
  <entry>
    <title>Axios,Boostrapを使って、図書管理システムを作成する</title>
    <link href="http://example.com/2024/11/16/Axios-Boostrap%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%80%81%E5%9B%B3%E6%9B%B8%E7%AE%A1%E7%90%86%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%82%92%E4%BD%9C%E6%88%90%E3%81%99%E3%82%8B/"/>
    <id>http://example.com/2024/11/16/Axios-Boostrap%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%80%81%E5%9B%B3%E6%9B%B8%E7%AE%A1%E7%90%86%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%82%92%E4%BD%9C%E6%88%90%E3%81%99%E3%82%8B/</id>
    <published>2024-11-15T16:36:59.000Z</published>
    <updated>2024-11-24T02:59:10.678Z</updated>
    
    <content type="html"><![CDATA[<p>ＨＴＭＬ　ペイジ</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Test Bootstrap<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.staticfile.net/twitter-bootstrap/3.3.7/css/bootstrap.min.css&quot;&gt;</span></span><br><span class="line"><span class="comment">&lt;script src=&quot;https://cdn.staticfile.net/jquery/2.1.1/jquery.min.js&quot;&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="comment">&lt;script src=&quot;https://cdn.staticfile.net/twitter-bootstrap/3.3.7/js/bootstrap.min.js&quot;&gt;&lt;/script&gt; --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;./css/index.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row  d-flex   justify-content-center mt-5 &quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-8&quot;</span>&gt;</span>Books<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary btn-lg col-sm-2 &quot;</span> <span class="attr">data-bs-toggle</span>=<span class="string">&quot;modal&quot;</span> <span class="attr">data-bs-target</span>=<span class="string">&quot;#myModal&quot;</span>&gt;</span>Add<span class="tag">&lt;/<span class="name">button</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     </span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">&quot;table col-10 mt-3 offset-1 table-light &quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">th</span>&gt;</span>No<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">th</span>&gt;</span>Name<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">th</span>&gt;</span>Author<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">th</span>&gt;</span>Publisher<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">th</span>&gt;</span>Operation<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">tbody</span> <span class="attr">class</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">td</span>&gt;</span>Doasdae<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">td</span>&gt;</span>asdasfas<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">td</span>&gt;</span>asdasfas<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;del&quot;</span>&gt;</span>Delete<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;edit&quot;</span>&gt;</span>Edit<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Modal --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal fade&quot;</span> <span class="attr">id</span>=<span class="string">&quot;myModal&quot;</span> <span class="attr">tabindex</span>=<span class="string">&quot;-1&quot;</span> <span class="attr">role</span>=<span class="string">&quot;dialog&quot;</span> <span class="attr">aria-labelledby</span>=<span class="string">&quot;myModalLabel&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-dialog&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-content&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-header&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn-close&quot;</span> <span class="attr">data-bs-dismiss</span>=<span class="string">&quot;modal&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line"><span class="symbol">&amp;times;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span> <span class="attr">class</span>=<span class="string">&quot;modal-title text-center w-100 &quot;</span> <span class="attr">id</span>=<span class="string">&quot;myModalLabel&quot;</span> &gt;</span>Add New Book<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-body&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">&quot;form-horizontal&quot;</span> <span class="attr">role</span>=<span class="string">&quot;form&quot;</span> <span class="attr">id</span>=<span class="string">&quot;add_form&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row mb-4&quot;</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;BookName&quot;</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-2 control-label&quot;</span> <span class="attr">id</span> = <span class="string">&#x27;name&#x27;</span>&gt;</span>Name<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-8&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BookName&quot;</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row mb-4&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;BookAuthor&quot;</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-2 control-label&quot;</span> <span class="attr">id</span> = <span class="string">&#x27;author&#x27;</span>&gt;</span>Author<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-8&quot;</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BookAuthor&quot;</span> &gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row mb-4&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;BookPublisher&quot;</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-2 control-label&quot;</span> <span class="attr">id</span> = <span class="string">&#x27;publisher&#x27;</span>&gt;</span>Publisher<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-8&quot;</span>&gt;</span></span><br><span class="line">                          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BookPublisher&quot;</span> &gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-footer&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-secondary&quot;</span> <span class="attr">data-bs-dismiss</span>=<span class="string">&quot;modal&quot;</span>&gt;</span>Close</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary &quot;</span> <span class="attr">id</span> = <span class="string">&#x27;submitBtn&#x27;</span>&gt;</span></span><br><span class="line">Submit</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!-- /.modal-content --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!-- /.modal --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/index.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myModalEl = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;myModal&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> myModal = <span class="keyword">new</span> bootstrap.<span class="title class_">Modal</span>(myModalEl); </span><br><span class="line"><span class="keyword">const</span> myaddForm = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;add_form&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> myList = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.list&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> submitBtn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;submitBtn&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">myList.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="function">(<span class="params">e</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">target</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">target</span>.<span class="property">classList</span>)</span><br><span class="line">  <span class="keyword">if</span>(e.<span class="property">target</span>.<span class="property">classList</span>.<span class="title function_">contains</span>(<span class="string">&quot;del&quot;</span>)) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;e.target.parentNode.dataset &quot;</span>+e.<span class="property">target</span>.<span class="property">parentNode</span>.<span class="property">dataset</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;e.target.parentNode.dataset.id &quot;</span>+e.<span class="property">target</span>.<span class="property">parentNode</span>.<span class="property">dataset</span>.<span class="property">id</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;e.target.dataset &quot;</span>+e.<span class="property">target</span>.<span class="property">dataset</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;e.target.dataset.id &quot;</span>+e.<span class="property">target</span>.<span class="property">dataset</span>.<span class="property">id</span>)</span><br><span class="line">    <span class="keyword">const</span> theId = e.<span class="property">target</span>.<span class="property">parentNode</span>.<span class="property">dataset</span>.<span class="property">id</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="title function_">axios</span>(&#123;</span><br><span class="line">      <span class="attr">url</span>: <span class="string">`http://hmajax.itheima.net/api/books/<span class="subst">$&#123;theId&#125;</span>`</span>,</span><br><span class="line">      <span class="attr">method</span>: <span class="string">&#x27;DELETE&#x27;</span></span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">result</span>=&gt;</span>&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;delete successful&quot;</span>) </span><br><span class="line">      <span class="title function_">getBooks</span>()</span><br><span class="line">    &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">error</span>=&gt;</span>&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;delete failed&quot;</span>) </span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(error)</span><br><span class="line">  &#125;)   </span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">submitBtn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;submit button clicked!&quot;</span>)</span><br><span class="line">    <span class="keyword">const</span> bookName = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;BookName&#x27;</span>).<span class="property">value</span></span><br><span class="line">    <span class="keyword">const</span> bookAuthor = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;BookAuthor&#x27;</span>).<span class="property">value</span></span><br><span class="line">    <span class="keyword">const</span> bookPublisher = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;BookPublisher&#x27;</span>).<span class="property">value</span></span><br><span class="line">    <span class="title function_">insertBooks</span>(bookName,bookAuthor,bookPublisher)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">insertBooks</span>(<span class="params">name, author,publisher,...others</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;TEST name &quot;</span>+name)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;TEST author &quot;</span>+author)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;TEST publisher &quot;</span>+publisher)</span><br><span class="line">  <span class="title function_">axios</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;http://hmajax.itheima.net/api/books&#x27;</span>,</span><br><span class="line">    <span class="attr">method</span>:<span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>:&#123;</span><br><span class="line">        <span class="string">&quot;bookname&quot;</span>: name,</span><br><span class="line">        <span class="string">&quot;author&quot;</span>: author,</span><br><span class="line">        <span class="string">&quot;publisher&quot;</span>: publisher,</span><br><span class="line">        <span class="string">&quot;creator&quot;</span>: <span class="string">&quot;kyle&quot;</span>  </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">result</span>=&gt;</span>&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;insert successful&quot;</span>)</span><br><span class="line">      <span class="title function_">getBooks</span>()</span><br><span class="line">      myaddForm.<span class="title function_">reset</span>()</span><br><span class="line">      myModal.<span class="title function_">hide</span>()</span><br><span class="line"></span><br><span class="line">    &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">error</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Insert Failed&quot;</span>)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(error)</span><br><span class="line">    &#125;)  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getBooks</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">axios</span>(&#123;</span><br><span class="line">      <span class="attr">url</span>: <span class="string">&#x27;http://hmajax.itheima.net/api/books&#x27;</span>,</span><br><span class="line">      <span class="attr">params</span>:&#123;</span><br><span class="line">          <span class="string">&#x27;creator&#x27;</span>:<span class="string">&quot;kyle&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">  &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">result</span>=&gt;</span>&#123;</span><br><span class="line">      <span class="keyword">const</span> booklist = result.<span class="property">data</span>.<span class="property">data</span></span><br><span class="line">      <span class="keyword">const</span> htmlStr = booklist.<span class="title function_">map</span>(<span class="function">(<span class="params">item,index</span>)=&gt;</span>&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="string">`&lt;tbody class=&quot;list&quot;&gt;</span></span><br><span class="line"><span class="string">          &lt;tr&gt;</span></span><br><span class="line"><span class="string">            &lt;td&gt;<span class="subst">$&#123;item.id&#125;</span>&lt;/td&gt;</span></span><br><span class="line"><span class="string">            &lt;td&gt;<span class="subst">$&#123;item.bookname&#125;</span>&lt;/td&gt;</span></span><br><span class="line"><span class="string">            &lt;td&gt;<span class="subst">$&#123;item.author&#125;</span>&lt;/td&gt;</span></span><br><span class="line"><span class="string">            &lt;td&gt;<span class="subst">$&#123;item.publisher&#125;</span>&lt;/td&gt;</span></span><br><span class="line"><span class="string">            &lt;td&gt;</span></span><br><span class="line"><span class="string">              &lt;span class=&quot;del&quot;&gt;Delete&lt;/span&gt;</span></span><br><span class="line"><span class="string">              &lt;span class=&quot;edit&quot;&gt;Edit&lt;/span&gt;</span></span><br><span class="line"><span class="string">            &lt;/td&gt;</span></span><br><span class="line"><span class="string">          &lt;/tr&gt;</span></span><br><span class="line"><span class="string">        &lt;/tbody&gt;`</span></span><br><span class="line">      &#125;).<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">      <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.list&quot;</span>).<span class="property">innerHTML</span> = htmlStr</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(booklist)</span><br><span class="line">  </span><br><span class="line">  &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">error</span>=&gt;</span>&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(error)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">getBooks</span>()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html"> </summary>
    
    
    
    <category term="Notes" scheme="http://example.com/categories/Notes/"/>
    
    
    <category term="Notes" scheme="http://example.com/tags/Notes/"/>
    
  </entry>
  
  <entry>
    <title>Boostrap3 Motal をBoostrap5 Motalにリファクタリング</title>
    <link href="http://example.com/2024/11/14/Boostrap3-Motal-%E3%82%92Boostrap5-Motal%E3%81%AB%E3%83%AA%E3%83%95%E3%82%A1%E3%82%AF%E3%82%BF%E3%83%AA%E3%83%B3%E3%82%B0/"/>
    <id>http://example.com/2024/11/14/Boostrap3-Motal-%E3%82%92Boostrap5-Motal%E3%81%AB%E3%83%AA%E3%83%95%E3%82%A1%E3%82%AF%E3%82%BF%E3%83%AA%E3%83%B3%E3%82%B0/</id>
    <published>2024-11-13T16:36:59.000Z</published>
    <updated>2024-11-24T02:58:43.439Z</updated>
    
    <content type="html"><![CDATA[<p>Boost3 Motal をBoost5 Motalにリファクタリングする時に<br>いくつかの注意点があります</p><ul><li>1.Boost5 MDN リンクを使って、Boost3 の　Mdnリンクを置き換える</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">&lt;!-- &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.staticfile.net/twitter-bootstrap/3.3.7/css/bootstrap.min.css&quot;&gt;</span></span><br><span class="line"><span class="comment">&lt;script src=&quot;https://cdn.staticfile.net/jquery/2.1.1/jquery.min.js&quot;&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="comment">&lt;script src=&quot;https://cdn.staticfile.net/twitter-bootstrap/3.3.7/js/bootstrap.min.js&quot;&gt;&lt;/script&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>２.いくつかの属性名前の変更</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">data-toggleを data-bs-toggleに変更する</span><br><span class="line">data-targetをdata-bs-targetに変更する</span><br><span class="line">closeをbtn-closeに変更する</span><br><span class="line">data-targetをdata-bs-targetに変更する</span><br><span class="line">data-dismissをdata-bs-dismissに変更する</span><br><span class="line">btn-defaultをbtn-secondary</span><br><span class="line">form-groupをrowに変更する </span><br><span class="line">control-labelをcolに変更する </span><br></pre></td></tr></table></figure><p>Example</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">  &lt;title&gt;Test Bootstrap&lt;/title&gt;</span><br><span class="line">  &lt;!-- &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.staticfile.net/twitter-bootstrap/3.3.7/css/bootstrap.min.css&quot;&gt;</span><br><span class="line">&lt;script src=&quot;https://cdn.staticfile.net/jquery/2.1.1/jquery.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;https://cdn.staticfile.net/twitter-bootstrap/3.3.7/js/bootstrap.min.js&quot;&gt;&lt;/script&gt; --&gt;</span><br><span class="line"></span><br><span class="line">  &lt;link href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&gt;</span><br><span class="line">  &lt;script src=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div class=&quot;container d-flex  flex-column justify-content-center align-items-center&quot;&gt;</span><br><span class="line">&lt;h2&gt;Book Managerment System&lt;/h2&gt;</span><br><span class="line">&lt;button class=&quot;btn btn-primary btn-lg&quot; data-bs-toggle=&quot;modal&quot; data-bs-target=&quot;#myModal&quot;&gt;Add&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;!-- Modal --&gt;</span><br><span class="line">&lt;div class=&quot;modal fade&quot; id=&quot;myModal&quot; tabindex=&quot;-1&quot; role=&quot;dialog&quot; aria-labelledby=&quot;myModalLabel&quot; aria-hidden=&quot;true&quot;&gt;</span><br><span class="line">&lt;div class=&quot;modal-dialog&quot;&gt;</span><br><span class="line">&lt;div class=&quot;modal-content&quot;&gt;</span><br><span class="line">&lt;div class=&quot;modal-header&quot;&gt;</span><br><span class="line">&lt;button type=&quot;button&quot; class=&quot;btn-close&quot; data-bs-dismiss=&quot;modal&quot; aria-hidden=&quot;true&quot;&gt;</span><br><span class="line">&amp;times;</span><br><span class="line">&lt;/button&gt;</span><br><span class="line">&lt;h5 class=&quot;modal-title text-center w-100 &quot; id=&quot;myModalLabel&quot; &gt;Add New Book&lt;/h5&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;modal-body&quot;&gt;</span><br><span class="line">&lt;form class=&quot;form-horizontal&quot; role=&quot;form&quot;&gt;</span><br><span class="line">                    &lt;div class=&quot;row mb-4&quot;&gt;</span><br><span class="line">                      &lt;label for=&quot;BookName&quot; class=&quot;col-sm-2 control-label&quot; id = &#x27;name&#x27;&gt;Name&lt;/label&gt;</span><br><span class="line">                      &lt;div class=&quot;col-sm-8&quot;&gt;</span><br><span class="line">                        &lt;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;BookName&quot;&gt;</span><br><span class="line">                      &lt;/div&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                    &lt;div class=&quot;row mb-4&quot;&gt;</span><br><span class="line">                    &lt;label for=&quot;BookAuthor&quot; class=&quot;col-sm-2 control-label&quot; id = &#x27;author&#x27;&gt;Author&lt;/label&gt;</span><br><span class="line">                    &lt;div class=&quot;col-sm-8&quot;&gt;</span><br><span class="line">                      &lt;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;BookAuthor&quot; &gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                    &lt;div class=&quot;row mb-4&quot;&gt;</span><br><span class="line">                        &lt;label for=&quot;Bookpublisher&quot; class=&quot;col-sm-2 control-label&quot; id = &#x27;publisher&#x27;&gt;Publisher&lt;/label&gt;</span><br><span class="line">                        &lt;div class=&quot;col-sm-8&quot;&gt;</span><br><span class="line">                          &lt;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;Bookpublisher&quot; &gt;</span><br><span class="line">                        &lt;/div&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                &lt;/form&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;modal-footer&quot;&gt;</span><br><span class="line">&lt;button type=&quot;button&quot; class=&quot;btn btn-secondary&quot; data-bs-dismiss=&quot;modal&quot;&gt;Close</span><br><span class="line">&lt;/button&gt;</span><br><span class="line">&lt;button type=&quot;button&quot; class=&quot;btn btn-primary &quot; id = &#x27;submitBtn&#x27;&gt;</span><br><span class="line">Submit</span><br><span class="line">&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;&lt;!-- /.modal-content --&gt;</span><br><span class="line">&lt;/div&gt;&lt;!-- /.modal --&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script src=&quot;./js/BookManagerment.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html"> </summary>
    
    
    
    <category term="Notes" scheme="http://example.com/categories/Notes/"/>
    
    
    <category term="Notes" scheme="http://example.com/tags/Notes/"/>
    
  </entry>
  
  <entry>
    <title>AJAX に基づくログインページ02 ーHTMLを追加とメッセージプアップ</title>
    <link href="http://example.com/2024/11/12/AJAX-%E3%81%AB%E5%9F%BA%E3%81%A5%E3%81%8F%E3%83%AD%E3%82%B0%E3%82%A4%E3%83%B3%E3%83%9A%E3%83%BC%E3%82%B802-%E3%83%BCHTML%E3%82%92%E8%BF%BD%E5%8A%A0%E3%81%A8%E3%83%A1%E3%83%83%E3%82%BB%E3%83%BC%E3%82%B8%E3%83%97%E3%82%A2%E3%83%83%E3%83%97/"/>
    <id>http://example.com/2024/11/12/AJAX-%E3%81%AB%E5%9F%BA%E3%81%A5%E3%81%8F%E3%83%AD%E3%82%B0%E3%82%A4%E3%83%B3%E3%83%9A%E3%83%BC%E3%82%B802-%E3%83%BCHTML%E3%82%92%E8%BF%BD%E5%8A%A0%E3%81%A8%E3%83%A1%E3%83%83%E3%82%BB%E3%83%BC%E3%82%B8%E3%83%97%E3%82%A2%E3%83%83%E3%83%97/</id>
    <published>2024-11-11T16:36:59.000Z</published>
    <updated>2024-11-12T14:31:21.472Z</updated>
    
    <content type="html"><![CDATA[<pre><code>HTML　ペイジー（Boostrapに基づく）</code></pre><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.staticfile.net/twitter-bootstrap/3.3.7/css/bootstrap.min.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.staticfile.net/jquery/2.1.1/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.staticfile.net/twitter-bootstrap/3.3.7/js/bootstrap.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Login Test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Welcome<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;alert&quot;</span> <span class="attr">role</span>=<span class="string">&quot;alert&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">&quot;form-horizontal&quot;</span> <span class="attr">role</span>=<span class="string">&quot;form&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-2 control-label&quot;</span>&gt;</span>User<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-10&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;user form-control&quot;</span> <span class="attr">id</span> = <span class="string">&quot;user&quot;</span> &gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;pwd&quot;</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-2 control-label&quot;</span>&gt;</span>Password<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-10&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;pwd form-control&quot;</span> <span class="attr">id</span>=<span class="string">&quot;pwd&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-offset-2 col-sm-10&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default login-btn&quot;</span>&gt;</span>Login<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">form</span>&gt;</span>        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;my_p_1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/login.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Javascript(AJAXを使って)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> loginBtn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.login-btn&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> myAlert = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.alert&#x27;</span>)</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">alert</span> (msg,success)&#123;</span><br><span class="line">    myAlert.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;d-none&#x27;</span>);</span><br><span class="line">    myAlert.<span class="property">innerText</span> = msg</span><br><span class="line">    myAlert.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;show&#x27;</span>)</span><br><span class="line">    myAlert.<span class="property">classList</span>.<span class="title function_">add</span>(success? <span class="string">&#x27;alert-success&#x27;</span>:<span class="string">&#x27;alert-danger&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span> &#123;</span><br><span class="line">        myAlert.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;d-none&#x27;</span>);</span><br><span class="line">        myAlert.<span class="property">innerText</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        myAlert.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;show&#x27;</span>)</span><br><span class="line">        myAlert.<span class="property">classList</span>.<span class="title function_">remove</span>(success? <span class="string">&#x27;alert-success&#x27;</span>:<span class="string">&#x27;alert-danger&#x27;</span>)    </span><br><span class="line">    &#125;,<span class="number">1000</span>)</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">loginBtn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    event.<span class="title function_">preventDefault</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;clicked&quot;</span>)</span><br><span class="line">    <span class="keyword">const</span> username = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.user&#x27;</span>).<span class="property">value</span>  </span><br><span class="line">    <span class="keyword">const</span> password = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.pwd&#x27;</span>).<span class="property">value</span>  </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(username)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(password)</span><br><span class="line">    <span class="keyword">const</span> p = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.my_p_1&#x27;</span>)  </span><br><span class="line">    <span class="title function_">axios</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&#x27;http://hmajax.itheima.net/api/login&#x27;</span>,</span><br><span class="line">        <span class="attr">method</span>:<span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">        <span class="attr">data</span>:&#123;</span><br><span class="line">            username,</span><br><span class="line">            password</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(result.<span class="property">data</span>.<span class="property">message</span>)</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&#x27;Login Success!&#x27;</span>,<span class="number">1</span>)</span><br><span class="line">    &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">error</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(error.<span class="property">response</span>.<span class="property">data</span>.<span class="property">message</span>)</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&#x27;Login Failed!&#x27;</span>,<span class="number">0</span>)</span><br><span class="line">    &#125;) </span><br><span class="line">      </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html"> </summary>
    
    
    
    <category term="Notes" scheme="http://example.com/categories/Notes/"/>
    
    
    <category term="Notes" scheme="http://example.com/tags/Notes/"/>
    
  </entry>
  
  <entry>
    <title>Boostrap-Motalを使って、ポップアップを作成する</title>
    <link href="http://example.com/2024/11/12/Boostrap-Motal%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%80%81%E3%83%9D%E3%83%83%E3%83%97%E3%82%A2%E3%83%83%E3%83%97%E3%82%92%E4%BD%9C%E6%88%90%E3%81%99%E3%82%8B/"/>
    <id>http://example.com/2024/11/12/Boostrap-Motal%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%80%81%E3%83%9D%E3%83%83%E3%83%97%E3%82%A2%E3%83%83%E3%83%97%E3%82%92%E4%BD%9C%E6%88%90%E3%81%99%E3%82%8B/</id>
    <published>2024-11-11T16:36:59.000Z</published>
    <updated>2024-11-12T14:39:11.532Z</updated>
    
    <content type="html"><![CDATA[<h2 id="紹介"><a href="#紹介" class="headerlink" title="紹介"></a>紹介</h2><p>バックエンドエンジニアとして、<br>最近、フロントエンドに興味があるので、<br>図書管理システムのプロジェクトを練習として試してみたいと思います<br>よろしくお願いいたします。<br>このページは<br>BoostのMotal,Formを使用する図書追加ページです</p><h2 id="コード"><a href="#コード" class="headerlink" title="コード"></a>コード</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Test Bootstrap<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.staticfile.net/twitter-bootstrap/3.3.7/css/bootstrap.min.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.staticfile.net/jquery/2.1.1/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.staticfile.net/twitter-bootstrap/3.3.7/js/bootstrap.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>Book Managerment System<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Button --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary btn-lg&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;modal&quot;</span> <span class="attr">data-target</span>=<span class="string">&quot;#myModal&quot;</span>&gt;</span></span><br><span class="line">Add</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Modal --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal fade&quot;</span> <span class="attr">id</span>=<span class="string">&quot;myModal&quot;</span> <span class="attr">tabindex</span>=<span class="string">&quot;-1&quot;</span> <span class="attr">role</span>=<span class="string">&quot;dialog&quot;</span> <span class="attr">aria-labelledby</span>=<span class="string">&quot;myModalLabel&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-dialog&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-content&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-header&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;close&quot;</span> <span class="attr">data-dismiss</span>=<span class="string">&quot;modal&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line"><span class="symbol">&amp;times;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span>=<span class="string">&quot;modal-title&quot;</span> <span class="attr">id</span>=<span class="string">&quot;myModalLabel&quot;</span>&gt;</span>Add New Book<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-body&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">&quot;form-horizontal&quot;</span> <span class="attr">role</span>=<span class="string">&quot;form&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;BookName&quot;</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-2 control-label&quot;</span>&gt;</span>Name<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-8&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BookName&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;please input book name&quot;</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;BookAuthor&quot;</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-2 control-label&quot;</span>&gt;</span>Author<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-8&quot;</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BookAuthor&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;please input book author&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;Bookpublisher&quot;</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-2 control-label&quot;</span>&gt;</span>Publisher<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-8&quot;</span>&gt;</span></span><br><span class="line">                          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">id</span>=<span class="string">&quot;Bookpublisher&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;please input book publisher&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-footer&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default&quot;</span> <span class="attr">data-dismiss</span>=<span class="string">&quot;modal&quot;</span>&gt;</span>Close</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span>&gt;</span></span><br><span class="line">Submit</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!-- /.modal-content --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!-- /.modal --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="実行結果"><a href="#実行結果" class="headerlink" title="実行結果"></a>実行結果</h2><p><img src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3916068/c48858d1-1b1e-d3a9-5136-bddba9fe1b84.png" alt="image.png"></p><p><img src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3916068/0dbd3910-bda2-3fcf-7bce-b0f9443ec3e6.png" alt="image.png"></p>]]></content>
    
    
    <summary type="html"> </summary>
    
    
    
    <category term="Notes" scheme="http://example.com/categories/Notes/"/>
    
    
    <category term="Notes" scheme="http://example.com/tags/Notes/"/>
    
  </entry>
  
  <entry>
    <title>AJAX に基づくログインページ01ー AJAXの簡単な使い方</title>
    <link href="http://example.com/2024/11/09/%E3%80%90ArticleHub-Project-%E3%83%8E%E3%83%BC%E3%83%88%E3%80%9101-%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E7%B4%B9%E4%BB%8B/"/>
    <id>http://example.com/2024/11/09/%E3%80%90ArticleHub-Project-%E3%83%8E%E3%83%BC%E3%83%88%E3%80%9101-%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E7%B4%B9%E4%BB%8B/</id>
    <published>2024-11-08T16:36:59.000Z</published>
    <updated>2024-11-24T00:20:15.250Z</updated>
    
    <content type="html"><![CDATA[<h1 id="「ArticleHub」"><a href="#「ArticleHub」" class="headerlink" title="「ArticleHub」"></a>「ArticleHub」</h1><p><a href="https://github.com/KyleAndKelly/ArticleHub">https://github.com/KyleAndKelly/ArticleHub</a></p><h2 id="1-紹介"><a href="#1-紹介" class="headerlink" title="1.紹介"></a>1.紹介</h2><ul><li><p>Managerment System for News Article </p></li><li><p>ニュース、ブログなどの文章を管理するためのシステム</p><h2 id="2-実行"><a href="#2-実行" class="headerlink" title="2.実行"></a>2.実行</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone </span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-機能"><a href="#2-機能" class="headerlink" title="2.機能"></a>2.機能</h2></li><li><p>認証コードに基づくログイン</p></li></ul><p>-　権限の判断</p><ul><li>文章内容リストのチェック（フイルター、ページネーション）</li><li>文章の編集</li><li>文章の削除</li><li>文章のアプロード（テクスト、写真など）</li></ul><h2 id="3-技術"><a href="#3-技術" class="headerlink" title="3.技術"></a>3.技術</h2><ul><li>Boostrapに基づく、ペイジのタグとスタイルを作成する</li><li>wangEditorプラグインを統合して、エデータを実装する</li><li>純粋なJavaScriptを使用して、CRUD業務を完了する</li><li>Axiosを使用して、RESTful APIとやり取りする</li><li>tokenを使って、権限の判断を行う</li><li>Node.jsを使用してプロジェクトをモジュール化し、</li><li>Webpackを使ってプロジェクトをビルドし、</li><li>npmでプロジェクトをデプロイした。</li></ul>]]></content>
    
    
    <summary type="html"> </summary>
    
    
    
    <category term="Notes" scheme="http://example.com/categories/Notes/"/>
    
    
    <category term="Notes" scheme="http://example.com/tags/Notes/"/>
    
  </entry>
  
  <entry>
    <title>AJAX に基づくログインページ01ー AJAXの簡単な使い方</title>
    <link href="http://example.com/2024/11/06/AJAX-%E3%81%AB%E5%9F%BA%E3%81%A5%E3%81%8F%E3%83%AD%E3%82%B0%E3%82%A4%E3%83%B3%E3%83%9A%E3%83%BC%E3%82%B801%E3%83%BC-AJAX%E3%81%AE%E7%B0%A1%E5%8D%98%E3%81%AA%E4%BD%BF%E3%81%84%E6%96%B9/"/>
    <id>http://example.com/2024/11/06/AJAX-%E3%81%AB%E5%9F%BA%E3%81%A5%E3%81%8F%E3%83%AD%E3%82%B0%E3%82%A4%E3%83%B3%E3%83%9A%E3%83%BC%E3%82%B801%E3%83%BC-AJAX%E3%81%AE%E7%B0%A1%E5%8D%98%E3%81%AA%E4%BD%BF%E3%81%84%E6%96%B9/</id>
    <published>2024-11-05T16:36:59.000Z</published>
    <updated>2024-11-06T12:56:26.547Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> username = <span class="string">&quot;randomuser&quot;</span></span><br><span class="line"><span class="keyword">const</span> password = <span class="string">&quot;123456&quot;</span></span><br><span class="line"><span class="keyword">const</span> p_element = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.my_p_1&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="title function_">axios</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;http://hmajax.itheima.net/api/login&#x27;</span>,</span><br><span class="line">    <span class="attr">method</span>:<span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>:&#123;</span><br><span class="line">        username,</span><br><span class="line">        password</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result.<span class="property">data</span>.<span class="property">message</span>)</span><br><span class="line">    <span class="keyword">if</span>(p_element)&#123;</span><br><span class="line">        p_element.<span class="property">innerHTML</span> = result.<span class="property">data</span>.<span class="property">message</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">error</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(error.<span class="property">response</span>.<span class="property">data</span>.<span class="property">message</span>)</span><br><span class="line">    <span class="keyword">if</span>(p_element)&#123;</span><br><span class="line">        p_element.<span class="property">innerHTML</span> = error.<span class="property">response</span>.<span class="property">data</span>.<span class="property">message</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;) </span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html"> </summary>
    
    
    
    <category term="Notes" scheme="http://example.com/categories/Notes/"/>
    
    
    <category term="Notes" scheme="http://example.com/tags/Notes/"/>
    
  </entry>
  
  <entry>
    <title>【经验总结】如何高效的解析Json</title>
    <link href="http://example.com/2023/09/04/%E3%80%90%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93%E3%80%91%E5%A6%82%E4%BD%95%E9%AB%98%E6%95%88%E7%9A%84%E8%A7%A3%E6%9E%90Json/"/>
    <id>http://example.com/2023/09/04/%E3%80%90%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93%E3%80%91%E5%A6%82%E4%BD%95%E9%AB%98%E6%95%88%E7%9A%84%E8%A7%A3%E6%9E%90Json/</id>
    <published>2023-09-03T16:36:59.000Z</published>
    <updated>2023-09-04T14:30:32.141Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h2 id="Json介绍"><a href="#Json介绍" class="headerlink" title="Json介绍"></a>Json介绍</h2><ul><li>Json是一种数据格式，广泛应用在需要数据交互的场景</li><li>Json由键值对组成</li><li>每一个键值对的key是字符串类型</li><li>每一个键值对的value是值类型(boo1值数字值字符串值)Array类型object类型</li><li>Json灵活性他可以不断嵌套，数组的每个元素还可以是数组或者键值对键值对的每个值还可<br>以是数组或者键值对<br><img src="https://img-blog.csdnimg.cn/9882335399854759becf5db381472072.png" alt="在这里插入图片描述"></li></ul><h2 id="Boost-PropertyTree介绍"><a href="#Boost-PropertyTree介绍" class="headerlink" title="Boost.PropertyTree介绍"></a>Boost.PropertyTree介绍</h2><h3 id="1-ptree结构体"><a href="#1-ptree结构体" class="headerlink" title="1 ptree结构体"></a>1 ptree结构体</h3><p><img src="https://img-blog.csdnimg.cn/a6c961b0d5b142a88f5a428123b18051.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/e193a48ce5874e54a1d24e6fa5db40c1.png" alt="在这里插入图片描述"></p><h3 id="2-读取json数据API"><a href="#2-读取json数据API" class="headerlink" title="2.读取json数据API"></a>2.读取json数据API</h3><p><img src="https://img-blog.csdnimg.cn/7a1848e289124d48a41f3a688c983c00.png" alt="在这里插入图片描述"></p><h3 id="3-获取子节点API"><a href="#3-获取子节点API" class="headerlink" title="3.获取子节点API"></a>3.获取子节点API</h3><p><img src="https://img-blog.csdnimg.cn/0446677e9727414f97329206f7c0d82b.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/33c0f389c981460290498c27a6daf9be.png" alt="在这里插入图片描述"></p><h3 id="4-数组遍历API"><a href="#4-数组遍历API" class="headerlink" title="4.数组遍历API"></a>4.数组遍历API</h3><p><img src="https://img-blog.csdnimg.cn/20792bed7e74453182c41954f3de9bd2.png" alt="在这里插入图片描述"></p><h3 id="5-其他API"><a href="#5-其他API" class="headerlink" title="5.其他API"></a>5.其他API</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">empty(): 当前节点是否含有子节点。比如当一个节点已经是叶子节点的时候返回false</span><br><span class="line">find(const key_type &amp;key) 返回指向该节点的迭代器 ，或者property_tree::ptree::not_found。</span><br><span class="line">count(const key_type &amp;key): 返回指定名称路径的节点的子节点的数目。</span><br></pre></td></tr></table></figure><h3 id="6-注意点"><a href="#6-注意点" class="headerlink" title="6.注意点"></a>6.注意点</h3><p>&#96;&#96;&#96;</p><ol><li>这个库默认不是线程安全的</li></ol><p>如果直接在多线程的程序中使用Boost解析JSON，<br>可能会在奇怪的时候报段错误。<br>我们如果需要它支持线程安全，<br>就必须加入一个宏#define BOOST_SPIRIT_THREADSAFE，</p><ol start="2"><li>try…catch<br>if ( root_node.get_child_optional( “name” ) ) {<br>  try {<br>     root_node.get_child(“name”)<br>  } catch (…) {<br>  …<br>  }<br>}</li></ol>]]></content>
    
    
    <summary type="html"> </summary>
    
    
    
    <category term="经验总结" scheme="http://example.com/categories/%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="经验总结" scheme="http://example.com/tags/%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>【C++】C++中的IO类总结——上篇</title>
    <link href="http://example.com/2023/06/05/%E3%80%90C-%E3%80%91C-%E4%B8%AD%E7%9A%84IO%E7%B1%BB%E6%80%BB%E7%BB%93%E2%80%94%E2%80%94%E4%B8%8A%E7%AF%87/"/>
    <id>http://example.com/2023/06/05/%E3%80%90C-%E3%80%91C-%E4%B8%AD%E7%9A%84IO%E7%B1%BB%E6%80%BB%E7%BB%93%E2%80%94%E2%80%94%E4%B8%8A%E7%AF%87/</id>
    <published>2023-06-04T16:36:59.000Z</published>
    <updated>2023-06-05T13:46:39.723Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    std::cout&lt;&lt;<span class="string">&quot;Hello World!&quot;</span>&lt;&lt;std::endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p>我们在学习C++时，往往都是从上面这段程序开始的<br>也就是在控制台窗口上打印Hello World</p></li><li><p>但是现在回过头去看这段简单的程序<br>你有没有思考过<br>cout代表什么？<br>iostream代表什么？<br>endl又代表了什么？<br>&lt;&lt;运算符的作用是什么？<br>为什么这样的操作就可以在屏幕上打印”Hello World”？<br>等等问题</p></li><li><p>看似简单的代码，背后却蕴含着庞大的知识体系</p></li><li><p>之前一直对这些问题不太清晰<br>现在重新回过头来总结一下</p></li></ul><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>C++的标准库中有专门用来进行IO操作的一种类，叫IO类，也叫输入输出流<br>通过这些IO类可以实现<code>控制台IO,文件IO,内存IO</code><br>也就是向<code>控制台/文件/内存</code>写入数据，<br>以及从<code>控制台/文件/内存</code>读取数据，</p><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><ul><li><p>IO类一共有9中</p></li><li><p>在iostream.hpp中定义了ostream istream iostream这三个类</p><pre><code>  (1)istream是用于从控制台读取内容的流类，cin就是该类的对象    (2)ostream是用于把内容输出到控制台的流类，cout就是该类的对象.    (3)iostream是既能用于从控制台读取，又能把内容输出到控制台的类。</code></pre></li><li><p>在fstream.hpp中定义了ofstream ifstream fstream这三个类</p><pre><code>  (1)ifstream是用于从文件读取数据的类.    (2)ofstream是用于向文件写人数据的类.    (3)fstream是既能从文件读取数据，又能向文件写人数据的类，</code></pre></li><li><p>在sstream.hpp这个头文件中 定义了stringstream类 ostringstream 类 istringstream类</p><pre><code>  (1)istringstream是用于从内存读取数据的类.    (2)ostringstream是用于向内存写人数据的类.    (3)stringstream是既能从内存读取数据，又能向内存写入数据的类，</code></pre></li></ul><p>下面两张图展示了不同的IO类之间的继承关系</p><p><img src="https://img-blog.csdnimg.cn/fe5ad6568b9c4b299a783bed5d033259.png" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/8371ae41123e4c4cb2a1bcc0822f94ec.png" alt="在这里插入图片描述"></p><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ul><li><ol><li>不能对IO对象赋值或者拷贝。</li></ol></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ofstream out1,out2;</span><br><span class="line">out1 = out2; <span class="comment">//错误：不能对流对象赋值</span></span><br><span class="line"><span class="function">ofstream <span class="title">print</span> <span class="params">(ofstream)</span></span>; 错误：不能初始化ofstream参数</span><br><span class="line">out2 =  <span class="built_in">print</span> (out2);  错误：不能拷贝流对象</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p>2.函数参数和返回值</p><pre><code>  由1得知 ,当函数的参数或者返回值使用了IO对象类型，不能采用值传递，  不能采用const 引用方式传递 ，   只能采用非const 引用方式传递</code></pre></li><li><ol start="3"><li>错误处理</li></ol><p>  在通过IO类进行读取的时候 不可避免会出现一些错误，比如文件格式错误 ，输入了错误的格式等等，<br>  C++中定义了一种叫 strm::iostate的bitset来表示对IO类读取操作时的不同状态  包含以下四种状态：<br>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1.strm::goodbit：流处于有效状态。该位为 0 表示流没有出现任何错误。</span><br><span class="line">2.strm::failbit：由于格式或类型错误，读写操作失败。</span><br><span class="line">                          例如，从流中读取的值无法转换为有效的目标类型。该位为 1 表示发生了此类错误。</span><br><span class="line">3.strm::eofbit：已经读到流的末尾，即无法继续读取数据。</span><br><span class="line">                该位为 1 表示读取操作已到达流的末尾。</span><br><span class="line">7.strm::badbit：流发生严重的错误，无法恢复。例如，数据无法从磁盘读取或写入磁盘，</span><br><span class="line">                         或者与底层设备的通信失败。该位为 1 表示发生了此类错误。</span><br></pre></td></tr></table></figure><br>      以上四种条件状态可以按位组合使用，例如 s.fail() | s.eof() 表示流可能发生了读取失败或到达末尾的情况。<br>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">同时C++的IO类提供了下面这些接口进行状态判定和状态清除</span><br></pre></td></tr></table></figure><br>              1.s.eof()：判断输入流 s 是否读到文件末尾，即文件读取是否结束。如果已经到达文件结尾，就返回 true，否则返回 false。<br>              2.s.fail()：判断是否在读取或写入流的过程中出现了错误，例如读取了无效的数据类型。如果流发生了 failbit 或 badbit 错误，则返回 true，否则返回 false。<br>              3.s.bad()：判断流是否发生了不可恢复的错误，例如在程序运行时无法打开文件或者无法从流中读取数据。如果流发生了 badbit 错误，则返回 true，否则返回 false。<br>              4.s.good()：判断流是否处于有效状态，即没有发生任何错误。如果流处于有效状态，则返回 true，否则返回 false。<br>              5.s.clear()：将流 s 的所有条件状态位都复位，将流的状态设置为有效。该函数没有参数，返回值为 void。<br>              6.s.clear(flags)：根据给定的 flags 标志位，将流 s 中对应条件状态位复位。flags 的类型为 strm::iostate，可以使用 | 运算符同时设置多个标志位。该函数没有返回值。<br>              7.s.setstate(flags)：根据给定的 flags 标志位，将流 s 中对应条件状态位置位。flags 的类型为 strm::iostate，可以使用 | 运算符同时设置多个标志位。该函数没有返回值。<br>              8.s.rdstate()：返回流 s 的当前条件状态，</p></li></ul><p>下面是使用实例<br><img src="https://img-blog.csdnimg.cn/c4caa1143f6d4c9b9035be531e6d85b6.png" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/839570c3c2e44120932c8bee82042441.png" alt="在这里插入图片描述"></p><ul><li><p>4.缓冲区机制</p><p>  <strong>什么是缓冲区机制？</strong></p><pre><code>  当我们在用std::cout的时候  如果这样写的话std::cout&lt;&lt;&quot;Hello World&quot;;  那么当程序执行完这句时 屏幕上可能不会打印Hello world 也可能会打印  这是因为每个输出流都管理一个缓冲区，用来保存程序读写的数据。  当你执行上面的cout时，  内容有可能被操作系统保存在缓冲区中，随后再打印。  也有可能刚好缓冲区满了然后立刻打印</code></pre><p>  <strong>为什么要有缓冲区机制？</strong></p><pre><code>  有了缓冲机制，  操作系统就可以将程序的多个输出操作组合成单一的系统级写操作。  由于操作系统级的写操作可能很耗时，  允许操作系统将多个输出操作组合 为单一的设备写操作可以带来很大的性能提升。</code></pre><p>  <strong>缓冲区什么时候会刷新？</strong></p><p>  1.程序正常结束<br>      程序异常结束，输出缓冲区不会被刷新<br>      <img src="https://img-blog.csdnimg.cn/ac9f4874ddfd4277b969ad7b3d6f9ac3.png" alt="在这里插入图片描述"><br>  2.缓冲区满时</p><p>  3.使用endl&#x2F;flush&#x2F;ends来强制刷新<br>     <img src="https://img-blog.csdnimg.cn/c6277b99271143e28a3f46419b5088a8.png" alt="在这里插入图片描述"><br>  4.进行unitbuf设置</p><p>  注意 默认情况下，对cerr是设置unitbuf的，因此写到cerr的内容都是立即刷新的。<br>  <img src="https://img-blog.csdnimg.cn/1dda6b666baa47b6b13a0ce080001f49.png" alt="在这里插入图片描述"></p><p>  ·5.一个输出流可能被关联到另一个流。<br>  在这种情况下，当读写被关联的流时，关联到的流的缓冲区会被刷新。<br>  例如，默认情况下，cin和cerr都关联到cout。因此，读cin或写cerr都会导致cout的缓冲区被刷新。</p></li></ul>]]></content>
    
    
    <summary type="html"> </summary>
    
    
    
    <category term="C++" scheme="http://example.com/categories/C/"/>
    
    
    <category term="C++" scheme="http://example.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>【C++】C++中的IO类总结——下篇</title>
    <link href="http://example.com/2023/06/05/%E3%80%90C-%E3%80%91C-%E4%B8%AD%E7%9A%84IO%E7%B1%BB%E6%80%BB%E7%BB%93%E2%80%94%E2%80%94%E4%B8%8B%E7%AF%87/"/>
    <id>http://example.com/2023/06/05/%E3%80%90C-%E3%80%91C-%E4%B8%AD%E7%9A%84IO%E7%B1%BB%E6%80%BB%E7%BB%93%E2%80%94%E2%80%94%E4%B8%8B%E7%AF%87/</id>
    <published>2023-06-04T16:36:59.000Z</published>
    <updated>2023-06-14T14:15:19.802Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><p><a href="https://kyleandkelly.github.io/2023/06/05/%E3%80%90C-%E3%80%91C-%E4%B8%AD%E7%9A%84IO%E7%B1%BB%E6%80%BB%E7%BB%93%E2%80%94%E2%80%94%E4%B8%8A%E7%AF%87/">【C++】C++中的IO类总结——上篇</a></p><h2 id="istream-x2F-ostream-x2F-iostream类"><a href="#istream-x2F-ostream-x2F-iostream类" class="headerlink" title="istream&#x2F;ostream&#x2F;iostream类"></a>istream&#x2F;ostream&#x2F;iostream类</h2><h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><h4 id="0-介绍"><a href="#0-介绍" class="headerlink" title="0. 介绍"></a>0. 介绍</h4><ul><li><p>cin&#x2F;cout&#x2F;cerr&#x2F;clog是 istream&#x2F;ostream&#x2F;iostream类实例化出来的对象</p></li><li><p>(1)cin对应于标准输人流，用于从键盘读取数据，也可以被重定向为从文件中读取数据。</p></li><li><p>(2)cout对应于标准输出流，用于向屏幕输出数据，也可以被重定向为向文件写入数据。</p></li><li><p>(3)cerr对应于标准错误输出流，用于向屏幕输出出错信息，不能被重定向。</p></li><li><p>(4)clog对应于标准错误输出流，用于向屏幕输出出错信息，不能被重定向。</p></li><li><p>cerr和clog的区别在于cerr不使用缓冲区，直接向显示器输出信息；而输出到clog中的信息先会<br>被存放在缓冲区，缓冲区满或者刷新时才输出到屏幕。</p><h4 id="1-cin"><a href="#1-cin" class="headerlink" title="1.cin"></a>1.cin</h4></li><li><p>cin是一个istream类对象，可以读取各种基本数据类型，如int、float、double、char、bool等。</p></li><li><p>cin输入运算符重载了&gt;&gt;，可以使用它从控制台读取数据，并将数据存储到指定变量中。</p></li><li><p>重定向<br>  对于重定向，可以使用freopen()函数将标准输入流cin和标准输出流cout重定向到一个文件上，<br>  或者重定向到其他设备上（如串口）。<br>  例如：</p>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;input.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);  <span class="comment">//将标准输入重定向到input.txt文件</span></span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;output.txt&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);  <span class="comment">//将标准输出重定向到output.txt文件</span></span><br></pre></td></tr></table></figure></li><li><p>判断输入结束</p>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> x;</span><br><span class="line"><span class="keyword">while</span> (cin &gt;&gt; x &amp;&amp; !cin.<span class="built_in">eof</span>()) &#123;</span><br><span class="line">    <span class="comment">//处理输入数据</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>  在这个例子中，我们首先使用cin读取一个整数，如果读取成功并且输入流没有结束，<br>  就对该整数进行处理。循环会一直执行，直到输入流读取到结束符为止。</p></li></ul><h4 id="2-cout"><a href="#2-cout" class="headerlink" title="2. cout"></a>2. cout</h4><ul><li><p>cout是一个ostream类对象。</p></li><li><p>cout输出运算符重载了&lt;&lt;，可以使用它向控制台输出数据。</p></li><li><p>cout支持格式化输出，例如，可以使用setw()函数设置输出宽度，使用setprecision()函数设置浮点数的精度等 这些接口我们后面会讲到</p></li><li><p>重定向<br>  对于重定向，我们可以使用freopen()函数将标准输出流cout重定向到一个文件上，或者重定向到其他设备上（如串口）。</p><p>  例如：</p>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;output.txt&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout); <span class="comment">//将标准输出重定向到output.txt文件</span></span><br></pre></td></tr></table></figure><p>  这样，我们就可以通过在程序中使用cout输出结果，<br>  然后将结果保存到文件中，而不是输出到控制台。<br>  在重定向时，需要注意文件的打开模式必须是”w”，<br>  否则会导致输出异常。</p><p>  另外，如果需要同时将输出流重定向到文件和控制台，<br>  可以使用重定向符”&gt;”将输出重定向到文件中，<br>  同时使用tee命令将输出复制一份到控制台，例如：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./a.out &gt; output.txt | <span class="built_in">tee</span> /dev/tty</span><br></pre></td></tr></table></figure><p>  在这个例子中，”.&#x2F;a.out”是需要运行的程序，<br>  “&gt; output.txt”将程序的输出重定向到output.txt文件，<br>  而”| tee &#x2F;dev&#x2F;tty”则将同样的输出内容复制一份输出到控制台。</p></li></ul><h4 id="3-cerr"><a href="#3-cerr" class="headerlink" title="3. cerr"></a>3. cerr</h4><ul><li><p>cerr是一个ostream类对象。</p></li><li><p>和cout类似，cerr输出运算符重载了&lt;&lt;，可以使用它向控制台输出错误信息。cerr支持格式化输出，例如，可以使用setw()函数设置输出宽度，使用setprecision()函数设置浮点数的精度等。</p></li><li><p>与cout不同的是，cerr的输出不能被重定向到文件或其他设备上，始终输出到控制台。</p></li><li><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><h4 id="1-lt-lt-运算符"><a href="#1-lt-lt-运算符" class="headerlink" title="1.&lt;&lt;运算符"></a>1.&lt;&lt;运算符</h4></li><li><p>&lt;&lt;运算符是iostream库中的输出运算符，</p></li><li><p>用于向输出流对象（如cout、cerr等）输出数据。</p></li><li><p>相比于printf等函数形式的输出方式，&lt;&lt;运算符使用起来更加直观、简便，也更加符合面向对象的思想。</p></li><li><p>使用时有一些需要注意的点</p><ul><li><p>1.转义字符：如果需要在输出结果中包含转义字符，可以使用转义符号\进行转义。例如，要在输出结果中包含引号或反斜杠符号，需要将其用\进行转义。</p></li><li><p>2.格式化输出：&lt;&lt;运算符支持格式化输出，可使用一些控制符和函数来控制输出格式。例如，在输出浮点数时，可以使用setprecision()函数设置小数点后的精度，使用fixed和scientific来指定输出的格式等。</p></li><li><p>3.运算符优先级：&lt;&lt;运算符的优先级相对较低，因此需要注意运算顺序。例如，如果要向输出流对象输出一个表达式的值，需要将该表达式使用括号括起来，以确保正确的运算顺序</p></li></ul></li></ul><h4 id="2-gt-gt-运算符"><a href="#2-gt-gt-运算符" class="headerlink" title="2. &gt;&gt;运算符"></a>2. &gt;&gt;运算符</h4><ul><li><p>&gt;&gt;运算符是iostream库中的输入运算符，</p></li><li><p>用于从输入流对象（如cin等）读取数据</p></li><li><p>在使用时有一些需要注意的点 </p></li><li><ol><li>输入验证<br>在使用&gt;&gt;运算符读取数据时，需要考虑输入数据的合法性。例如，当从输入流中读取一个整数时，可能会出现输入非数字字符的情况，这时需要处理输入错误并重新读取输入。<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> num1, num2;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请输入两个整数：&quot;</span>;</span><br><span class="line">    cin &gt;&gt; num1 &gt;&gt; num2;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输入验证，如果输入不合法，则重新读取输入</span></span><br><span class="line">    <span class="keyword">while</span> (cin.<span class="built_in">fail</span>()) &#123;</span><br><span class="line">        cin.<span class="built_in">clear</span>();  <span class="comment">// 清除错误标志</span></span><br><span class="line">        cin.<span class="built_in">ignore</span>(numeric_limits&lt;streamsize&gt;::<span class="built_in">max</span>(), <span class="string">&#x27;\n&#x27;</span>);  <span class="comment">// 跳过当前行剩余字符</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;输入不合法，请重新输入：&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cin &gt;&gt; num1 &gt;&gt; num2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;两个整数之和为：&quot;</span> &lt;&lt; num1 + num2 &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><ol start="2"><li>默认忽略空格&#x2F;制表符&#x2F;换行符<br>   比如当我们使用cin &gt;&gt; num1 &gt;&gt; num2; 语句从输入流中读取两个整数时，如果用户输入的是”10 20”（输入数字之间包含空格），则程序会将这两个数字分别读取到num1和num2变量中，而不会将空格字符读取到变量中。如果我们需要从输入流中读取带有空格等特殊字符的数据，可以使用getline()函数进行处理，该函数可以读取包含空格等特殊字符的一整行数据，并将其存储在字符串中。在使</li></ol></li><li><ol start="3"><li>忽略字符：有时需要跳过输入流中的某些字符，可以使用ignore()函数实现。<h4 id="3-get函数"><a href="#3-get函数" class="headerlink" title="3. get函数"></a>3. get函数</h4><img src="https://img-blog.csdnimg.cn/091b3721acad46a395a90dbe3febcf64.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/fbafb5a7a1634fbe9cba90d6e7b78045.png" alt="在这里插入图片描述"></li></ol></li></ul><h4 id="4-getline函数"><a href="#4-getline函数" class="headerlink" title="4. getline函数"></a>4. getline函数</h4><p><img src="https://img-blog.csdnimg.cn/7590624869b0452fbebaf23fb012a6d6.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/c117347b2b9b4344a47f13e0ed99eb09.png" alt="在这里插入图片描述"></p><h4 id="5-ignore函数"><a href="#5-ignore函数" class="headerlink" title="5.ignore函数"></a>5.ignore函数</h4><p><img src="https://img-blog.csdnimg.cn/a2fce8a866164bcfb6c00af4cb1156d6.png" alt="在这里插入图片描述"></p><h4 id="6-peek函数"><a href="#6-peek函数" class="headerlink" title="6.peek函数"></a>6.peek函数</h4><ul><li>iostream中的peek函数可以用于查看输入流中下一个字符，而不会将其从流中删除。其函数原型如下：</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">peek</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><ul><li><p>peek()函数返回输入流中的下一个字符，但并不将其从流中删除。当输入流为空时，peek()函数会返回EOF（End of File）。</p></li><li><p>我们可以使用peek()函数来实现一些特殊的输入操作，例如判断输入流中下一个字符是否为指定字符等。</p></li><li><p>下面是一个示例代码，演示了peek()函数的使用方法：</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">char</span> c;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请输入一个字符: &quot;</span>;</span><br><span class="line">    cin &gt;&gt; c;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (cin.<span class="built_in">peek</span>() == <span class="string">&#x27;\n&#x27;</span>) &#123;  <span class="comment">// 如果输入流中下一个字符是回车符，则说明用户未输入第二个字符</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;输入了一个字符：&quot;</span> &lt;&lt; c &lt;&lt; endl;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span> &#123;  <span class="comment">// 否则继续读取输入流中的第二个字符</span></span><br><span class="line">        <span class="type">char</span> d;</span><br><span class="line">        cin &gt;&gt; d;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;输入了两个字符：&quot;</span> &lt;&lt; c &lt;&lt; <span class="string">&quot; 和 &quot;</span> &lt;&lt; d &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在上述示例代码中，我们使用了peek()函数来查看输入流中下一个字符，以判断用户是否输入了第二个字符。</li><li>如果输入流中下一个字符是回车符，则说明用户只输入了一个字符；</li><li>否则，继续使用cin读取输入流中的第二个字符，并输出两个字符。</li><li>这样，我们就可以根据下一个字符的特点来决定如何处理输入了。</li></ul><h4 id="7-输出格式指定函数"><a href="#7-输出格式指定函数" class="headerlink" title="7.输出格式指定函数"></a>7.输出格式指定函数</h4><p><img src="https://img-blog.csdnimg.cn/b4c73efc1f194c21a0581d858ef81ea8.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/0a923ed29f5c4dd981ef20fd1d877d0e.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/e642d662feb04d67b7882405fb792106.png" alt="在这里插入图片描述"></p><h4 id="8-eof-x2F-fail-x2F-bad-x2F-good-x2F-clear-x2F-setstate-x2F-rdstate函数"><a href="#8-eof-x2F-fail-x2F-bad-x2F-good-x2F-clear-x2F-setstate-x2F-rdstate函数" class="headerlink" title="8.eof&#x2F;fail&#x2F;bad&#x2F;good&#x2F;clear&#x2F;setstate&#x2F;rdstate函数"></a>8.eof&#x2F;fail&#x2F;bad&#x2F;good&#x2F;clear&#x2F;setstate&#x2F;rdstate函数</h4><ul><li>这些函数在<a href="https://kyleandkelly.github.io/2023/06/05/%E3%80%90C-%E3%80%91C-%E4%B8%AD%E7%9A%84IO%E7%B1%BB%E6%80%BB%E7%BB%93%E2%80%94%E2%80%94%E4%B8%8A%E7%AF%87/">【C++】C++中的IO类总结——上篇</a>讲过<br>主要用来进行输入输出流的状态检测和错误处理<br>这里不赘述<h2 id="ifstream-x2F-ofstream-x2F-fstream类"><a href="#ifstream-x2F-ofstream-x2F-fstream类" class="headerlink" title="ifstream&#x2F;ofstream&#x2F;fstream类"></a>ifstream&#x2F;ofstream&#x2F;fstream类</h2></li></ul><p>待补充</p><h2 id="istringstream-x2F-ostringstream-x2F-stringstream类"><a href="#istringstream-x2F-ostringstream-x2F-stringstream类" class="headerlink" title="istringstream&#x2F;ostringstream&#x2F;stringstream类"></a>istringstream&#x2F;ostringstream&#x2F;stringstream类</h2><p>待补充</p>]]></content>
    
    
    <summary type="html"> </summary>
    
    
    
    <category term="C++" scheme="http://example.com/categories/C/"/>
    
    
    <category term="C++" scheme="http://example.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>【C++】C++中的boost库—String_Algorithm_Library</title>
    <link href="http://example.com/2023/05/31/%E3%80%90C-%E3%80%91C-%E4%B8%AD%E7%9A%84boost%E5%BA%93%E2%80%94String-Algorithm-Library/"/>
    <id>http://example.com/2023/05/31/%E3%80%90C-%E3%80%91C-%E4%B8%AD%E7%9A%84boost%E5%BA%93%E2%80%94String-Algorithm-Library/</id>
    <published>2023-05-30T16:36:59.000Z</published>
    <updated>2023-05-31T11:00:07.250Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><ul><li>本篇文章讲讲Boost库中String_Algorithm_Library常用的那些接口</li><li><a href="https://www.boost.org/doc/libs/1_62_0/doc/html/string_algo/reference.html">参考</a></li></ul><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ul><li><code>&lt;boost/algorithm/string/case_conv.hpp&gt;</code>：提供字符串大小写转换函数，包括 <code>to_lower()</code>、<code>to_upper()</code>、<code>to_title()</code>、<code>to_lower_copy()</code>、<code>to_upper_copy()</code> 和 <code>to_title_copy()</code>。</li><li><code>&lt;boost/algorithm/string/classification.hpp&gt;</code>：提供用于判断字符分类的函数对象，如 <code>is_any_of</code>、<code>is_alpha</code>、<code>is_digit</code>、<code>is_space</code> 等。</li><li><code>&lt;boost/algorithm/string/compare.hpp&gt;</code>：提供字符串比较函数，包括 <code>is_equal()</code>、<code>ilexicographical_compare()</code>、<code>iless()</code> 和 <code>ilexicographical_compare()</code>。</li><li><code>&lt;boost/algorithm/string/concept.hpp&gt;</code>：定义了用于实现字符串算法及其特征的概念、标准化和接口文档。</li><li><code>&lt;boost/algorithm/string/constants.hpp&gt;</code>：定义一些与字符串算法相关的常量，如空格字符、单引号、双引号等。</li><li><code>&lt;boost/algorithm/string/erase.hpp&gt;</code>：提供字符串删除函数，包括 <code>erase_first()</code>、<code>erase_nth()</code> 和 <code>erase_all()</code>。</li><li><code>&lt;boost/algorithm/string/find.hpp&gt;</code>：提供字符串查找函数，包括 <code>find_first()</code>、<code>find_last()</code>、<code>find_nth()</code> 和 <code>find_all()</code>。</li><li><code>&lt;boost/algorithm/string/find_format.hpp&gt;</code>：提供字符串查找并替换函数，包括 <code>replace_first()</code>、<code>replace_last()</code>、<code>replace_nth()</code> 和 <code>replace_all()</code>。</li><li><code>&lt;boost/algorithm/string/find_iterator.hpp&gt;</code>：提供一系列查找字符串的迭代器，如 <code>find_iterator</code>、<code>token_iterator</code> 和 <code>split_iterator</code>。</li><li><code>&lt;boost/algorithm/string/finder.hpp&gt;</code>：定义了在字符串中查找子串的算法，包括简单查找算法和 KMP 算法。</li><li><code>&lt;boost/algorithm/string/formatter.hpp&gt;</code>：定义了用于格式化输出字符串的函数对象，如 <code>repeat_formatter</code>、<code>range_formatter</code> 和 <code>join_formatter</code>。</li><li><code>&lt;boost/algorithm/string/iter_find.hpp&gt;</code>：定义了一个类模板 <code>iter_find_t</code>，可以在字符串中查找子串并返回迭代器。</li><li><code>&lt;boost/algorithm/string/join.hpp&gt;</code>：提供字符串连接函数，包括 <code>join()</code>、<code>join_if()</code> 和 <code>concat()</code>。</li><li><code>&lt;boost/algorithm/string/predicate.hpp&gt;</code>：提供字符串谓词函数，包括 <code>starts_with()</code>、<code>ends_with()</code>、<code>contains()</code>、<code>equals()</code>、<code>iequals()</code> 和 <code>iless()</code>。</li><li><code>&lt;boost/algorithm/string/regex.hpp&gt;</code>：提供与正则表达式相关的字符串函数，包括 <code>regex_match()</code>、<code>regex_search()</code>、<code>regex_replace()</code>。</li><li><code>&lt;boost/algorithm/string/regex_find_format.hpp&gt;</code>：提供使用正则表达式查找并替换字符串的函数，包括 <code>regex_replace()</code> 和 <code>regex_transform()</code>。</li><li><code>&lt;boost/algorithm/string/replace.hpp&gt;</code>：提供替换字符串函数，包括 <code>replace_first()</code>、<code>replace_last()</code>、<code>replace_nth()</code> 和 <code>replace_all()</code>。</li><li><code>&lt;boost/algorithm/string/sequence_traits.hpp&gt;</code>：定义了判断序列类型的函数模板 <code>is_sequence</code>，用于判断一个类型是否为序列。</li><li><code>&lt;boost/algorithm/string/split.hpp&gt;</code>：提供字符串分割函数，包括 <code>split()</code>、<code>split_if()</code> 和 <code>splitted()</code>。</li><li><code>&lt;boost/algorithm/string/std_containers_traits.hpp&gt;</code>：定义了用于实现 STL 容器的特化模板 <code>sequence_traits</code>。</li><li><code>&lt;boost/algorithm/string/trim.hpp&gt;</code>：提供字符串去除空格函数，包括 <code>trim()</code>、<code>trim_left()</code>、<code>trim_right()</code> 和 <code>trim_copy()</code>。</li><li><code>&lt;boost/algorithm/string/trim_all.hpp&gt;</code>：提供字符串去除所有空格函数，包括 <code>trim_all()</code>、<code>trim_all_copy()</code>。</li></ul><h2 id="0-lt-boost-algorithm-string-case-conv-hpp-gt"><a href="#0-lt-boost-algorithm-string-case-conv-hpp-gt" class="headerlink" title="0.&lt;boost/algorithm/string/case_conv.hpp&gt;"></a>0.<code>&lt;boost/algorithm/string/case_conv.hpp&gt;</code></h2><ul><li>to_lower()：将一个字符串转换为全小写格式。</li><li>to_upper()：将一个字符串转换为全大写格式。</li><li>to_title()：将一个字符串所有单词的首字母转换为大写。</li><li>to_lower_copy()：生成一个全小写格式的副本。</li><li>to_upper_copy()：生成一个全大写格式的副本。</li><li>to_title_copy()：生成一个标题格式的副本。</li></ul><h2 id="1-lt-boost-algorithm-string-compare-hpp-gt-："><a href="#1-lt-boost-algorithm-string-compare-hpp-gt-：" class="headerlink" title="1. &lt;boost/algorithm/string/compare.hpp&gt;："></a>1. <code>&lt;boost/algorithm/string/compare.hpp&gt;</code>：</h2><p>该头文件提供字符串的比较函数。主要包括以下函数：</p><ul><li><code>is_equal()</code>：用于判断两个字符串是否相等，可以指定比较大小写敏感或不敏感。</li><li><code>ilexicographical_compare()</code>：用于比较字符串的字典序，可以指定比较大小写敏感或不敏感。</li><li><code>iless()</code>：用于判断一个字符串是否小于另一个字符串，可以指定比较大小写敏感或不敏感。</li><li><code>ilexicographical_compare()</code>：用于比较字符串的字典序，可以指定比较大小写敏感或不敏感。</li></ul><h2 id="2-lt-boost-algorithm-string-erase-hpp-gt-："><a href="#2-lt-boost-algorithm-string-erase-hpp-gt-：" class="headerlink" title="2. &lt;boost/algorithm/string/erase.hpp&gt;："></a>2. <code>&lt;boost/algorithm/string/erase.hpp&gt;</code>：</h2><p>该头文件提供了删除字符串子串的函数。主要包括以下函数：</p><ul><li><code>erase_first()</code>：用于删除第一个出现的指定子串。</li><li><code>erase_nth()</code>：用于删除第 n 个出现的指定子串。</li><li><code>erase_all()</code>：用于删除所有出现的指定子串。</li></ul><h2 id="3-lt-boost-algorithm-string-find-hpp-gt-："><a href="#3-lt-boost-algorithm-string-find-hpp-gt-：" class="headerlink" title="3. &lt;boost/algorithm/string/find.hpp&gt;："></a>3. <code>&lt;boost/algorithm/string/find.hpp&gt;</code>：</h2><p>该头文件提供了查找字符串子串的函数。主要包括以下函数：</p><ul><li><code>find_first()</code>：用于查找第一个出现的指定子串，返回子串起始位置和结束位置。</li><li><code>find_last()</code>：用于查找最后一个出现的指定子串，返回子串起始位置和结束位置。</li><li><code>find_nth()</code>：用于查找第 n 个出现的指定子串，返回子串起始位置和结束位置。</li><li><code>find_all()</code>：用于查找所有出现的指定子串，返回子串起始位置和结束位置的迭代器。</li></ul><h2 id="4-lt-boost-algorithm-string-find-format-hpp-gt-："><a href="#4-lt-boost-algorithm-string-find-format-hpp-gt-：" class="headerlink" title="4. &lt;boost/algorithm/string/find_format.hpp&gt;："></a>4. <code>&lt;boost/algorithm/string/find_format.hpp&gt;</code>：</h2><p>该头文件提供了查找并替换字符串子串的函数。主要包括以下函数：</p><ul><li><code>replace_first()</code>：用于查找并替换第一个出现的指定子串。</li><li><code>replace_last()</code>：用于查找并替换最后一个出现的指定子串。</li><li><code>replace_nth()</code>：用于查找并替换第 n 个出现的指定子串。</li><li><code>replace_all()</code>：用于查找并替换所有出现的指定子串。</li></ul><h2 id="5-lt-boost-algorithm-string-finder-hpp-gt-："><a href="#5-lt-boost-algorithm-string-finder-hpp-gt-：" class="headerlink" title="5. &lt;boost/algorithm/string/finder.hpp&gt;："></a>5. <code>&lt;boost/algorithm/string/finder.hpp&gt;</code>：</h2><p>该头文件提供了在字符串中查找子串的算法。其中包含了一些简单查找算法和 KMP 算法。</p><h2 id="6-lt-boost-algorithm-string-join-hpp-gt-："><a href="#6-lt-boost-algorithm-string-join-hpp-gt-：" class="headerlink" title="6. &lt;boost/algorithm/string/join.hpp&gt;："></a>6. <code>&lt;boost/algorithm/string/join.hpp&gt;</code>：</h2><p>该头文件提供了连接多个字符串为一个字符串的函数。主要包括以下函数：</p><ul><li><code>join()</code>：用于连接多个字符串，并添加指定的分隔符。</li><li><code>join_if()</code>：用于只连接满足指定谓词条件的字符串，并添加指定的分隔符。</li><li><code>concat()</code>：用于连接两个字符串。</li></ul><h2 id="7-lt-boost-algorithm-string-split-hpp-gt-："><a href="#7-lt-boost-algorithm-string-split-hpp-gt-：" class="headerlink" title="7. &lt;boost/algorithm/string/split.hpp&gt;："></a>7. <code>&lt;boost/algorithm/string/split.hpp&gt;</code>：</h2><p>该头文件提供了将字符串分割为多个子串的函数。主要包括以下函数：</p><ul><li><code>split()</code>：用于按指定分隔符分割字符串，并将结果存入一个容器中。</li><li><code>split_if()</code>：用于根据指定谓词函数判断是否需要分割，并将结果存入一个容器中。</li><li><code>splitted()</code>：用于返回按指定分隔符分割后的结果，作为一个可迭代对象使用。</li></ul><h2 id="8-lt-boost-algorithm-string-trim-hpp-gt-："><a href="#8-lt-boost-algorithm-string-trim-hpp-gt-：" class="headerlink" title="8. &lt;boost/algorithm/string/trim.hpp&gt;："></a>8. <code>&lt;boost/algorithm/string/trim.hpp&gt;</code>：</h2><p>该头文件提供了去除字符串首尾空白字符的函数。主要包括以下函数：</p><ul><li><code>trim()</code>：用于去除字符串首尾空白字符。</li><li><code>trim_left()</code>：用于去除字符串左侧空白字符。</li><li><code>trim_right()</code>：用于去除字符串右侧空白字符。</li><li><code>trim_copy()</code>：用于返回去除首尾空白字符后的字符串副本。</li></ul><h2 id="9-lt-boost-algorithm-string-regex-hpp-gt-："><a href="#9-lt-boost-algorithm-string-regex-hpp-gt-：" class="headerlink" title="9. &lt;boost/algorithm/string/regex.hpp&gt;："></a>9. <code>&lt;boost/algorithm/string/regex.hpp&gt;</code>：</h2><p>该头文件提供了与正则表达式相关的函数。主要包括以下函数：</p><ul><li><code>regex_match()</code>：用于检测一个字符串是否符合正则表达式的模式。</li><li><code>regex_search()</code>：用于在一个字符串中查找匹配正则表达式模式的子串。</li><li><code>regex_replace()</code>：用于查找并替换匹配正则表达式模式的子串。</li></ul><h2 id="10-lt-boost-algorithm-string-regex-find-format-hpp-gt-："><a href="#10-lt-boost-algorithm-string-regex-find-format-hpp-gt-：" class="headerlink" title="10. &lt;boost/algorithm/string/regex_find_format.hpp&gt;："></a>10. <code>&lt;boost/algorithm/string/regex_find_format.hpp&gt;</code>：</h2><p>该头文件提供了使用正则表达式进行查找和替换的函数。主要包括以下函数：</p><ul><li><code>regex_replace()</code>：用于通过正则表达式查找并替换字符串中的相应子串。</li><li><code>regex_transform()</code>：用于通过正则表达式查找某些子串并返回一个格式化后的副本。</li></ul><h1 id="11-lt-boost-algorithm-string-replace-hpp-gt"><a href="#11-lt-boost-algorithm-string-replace-hpp-gt" class="headerlink" title="11. &lt;boost/algorithm/string/replace.hpp&gt;"></a>11. <code>&lt;boost/algorithm/string/replace.hpp&gt;</code></h1><p>头文件。该头文件提供了替换字符串子串的函数，主要包括以下函数：</p><ul><li><code>replace_first_copy()</code>：用于替换第一个出现的指定子串，并返回替换后的字符串副本。</li><li><code>replace_last_copy()</code>：用于替换最后一个出现的指定子串，并返回替换后的字符串副本。</li><li><code>replace_nth_copy()</code>：用于替换第 n 个出现的指定子串，并返回替换后的字符串副本。</li><li><code>replace_all_copy()</code>：用于替换所有出现的指定子串，并返回替换后的字符串副本。</li></ul><p>此外，还有以下函数可以直接在原字符串上进行替换操作：</p><ul><li><code>replace_first()</code>：用于替换第一个出现的指定子串。</li><li><code>replace_last()</code>：用于替换最后一个出现的指定子串。</li><li><code>replace_nth()</code>：用于替换第 n 个出现的指定子串。</li><li><code>replace_all()</code>：用于替换所有出现的指定子串。</li></ul>]]></content>
    
    
    <summary type="html"> </summary>
    
    
    
    <category term="C++" scheme="http://example.com/categories/C/"/>
    
    
    <category term="C++" scheme="http://example.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>【经验总结】如何使用tcl进行文件IO</title>
    <link href="http://example.com/2023/05/29/%E3%80%90%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93%E3%80%91%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8tcl%E8%BF%9B%E8%A1%8C%E6%96%87%E4%BB%B6IO/"/>
    <id>http://example.com/2023/05/29/%E3%80%90%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93%E3%80%91%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8tcl%E8%BF%9B%E8%A1%8C%E6%96%87%E4%BB%B6IO/</id>
    <published>2023-05-28T16:36:59.000Z</published>
    <updated>2023-06-15T12:48:49.144Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h2 id="open和close命令"><a href="#open和close命令" class="headerlink" title="open和close命令"></a>open和close命令</h2><ul><li><p>open用于打开一个文件并返回一个文件标识符，该标识符可以用于后续的读写操作。close用于关闭一个打开的文件。</p></li><li><p>在Tcl中，open和close命令的用法如下：</p></li></ul><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> fileId [<span class="keyword">open</span> <span class="keyword">filename</span> ?access? ?permissions?]</span><br><span class="line"><span class="keyword">close</span> fileId</span><br></pre></td></tr></table></figure><ul><li>其中，filename是要打开的文件名，access是访问模式，可选参数，默认为只读模式（”r”）。permissions是文件的权限，可选参数，默认为0666。<br><img src="https://img-blog.csdnimg.cn/fe56334d7c5c412686895a2feee9dad6.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/1d408072918d48b6bbc3701711c240b2.png" alt="在这里插入图片描述"></li></ul><p><img src="https://img-blog.csdnimg.cn/c19b7655d40c4b948415f453193d1d2f.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/736f82099e014d678e50446ca2f6fbb9.png" alt="在这里插入图片描述"></p><h2 id="gets和puts命令"><a href="#gets和puts命令" class="headerlink" title="gets和puts命令"></a>gets和puts命令</h2><ul><li><p>gets用于逐行读取一个文件或一个管道的内容。puts用于将字符串、变量或文件输出到控制台或指定文件中。</p></li><li><p>在Tcl中，gets和puts命令的用法如下：</p></li></ul><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">gets</span> fileId ?<span class="keyword">variable</span>?</span><br><span class="line"><span class="keyword">puts</span> <span class="keyword">string</span> ?channelId?</span><br><span class="line"><span class="keyword">puts</span> -nonewline <span class="keyword">string</span> ?channelId?</span><br></pre></td></tr></table></figure><p>其中，fileId是文件标识符，variable是存储读取结果的变量名。string是要输出的字符串或变量值，channelId是要输出到的文件标识符，默认为标准输出。<br><img src="https://img-blog.csdnimg.cn/3a6d83239ef940fc89ddf91a399bf5bd.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/5b10da8ff6564c7bb6b5f7a0777f4e22.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/3280353097d9481689a566c206cebeb5.png" alt="在这里插入图片描述"></p><h2 id="read和write命令"><a href="#read和write命令" class="headerlink" title="read和write命令"></a>read和write命令</h2><ul><li><p>read用于从一个打开的文件或一个管道读取指定字节数的数据。write用于将指定的数据写入一段已打开的文件或管道。</p></li><li><p>在Tcl中，read和write命令的用法如下：</p></li></ul><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">read</span> fileId ?count?</span><br><span class="line">write fileId <span class="keyword">string</span></span><br></pre></td></tr></table></figure><ul><li>其中，fileId是文件标识符，count是要读取的字节数。string是要写入的字符串或变量值。<br><img src="https://img-blog.csdnimg.cn/fa769e7c19ff4c57a18531b17471cde4.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/3ab324f9f2464a22a5d7af9593391e32.png" alt="在这里插入图片描述"><h2 id="eof命令"><a href="#eof命令" class="headerlink" title="eof命令"></a>eof命令</h2><img src="https://img-blog.csdnimg.cn/4509d354744349eab4812c15aa5eb34a.png" alt="在这里插入图片描述"><h2 id="flush命令"><a href="#flush命令" class="headerlink" title="flush命令"></a>flush命令</h2><img src="https://img-blog.csdnimg.cn/b0bbe0c4a68d4c069660c280f51b5c71.png" alt="在这里插入图片描述"></li></ul><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><ul><li>以下是一个使用这些命令进行文件I&#x2F;O的示例代码：</li></ul><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打开文件并写入一段文本</span></span><br><span class="line"><span class="keyword">set</span> fileId [<span class="keyword">open</span> <span class="string">&quot;test.txt&quot;</span> <span class="string">&quot;w&quot;</span>]</span><br><span class="line"><span class="keyword">puts</span> <span class="variable">$fileId</span> <span class="string">&quot;Hello, world!&quot;</span></span><br><span class="line"><span class="keyword">close</span> <span class="variable">$fileId</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取文件内容并输出到控制台</span></span><br><span class="line"><span class="keyword">set</span> fileId [<span class="keyword">open</span> <span class="string">&quot;test.txt&quot;</span> <span class="string">&quot;r&quot;</span>]</span><br><span class="line"><span class="keyword">while</span> &#123;[<span class="keyword">gets</span> <span class="variable">$fileId</span> line] != <span class="number">-1</span>&#125; &#123;</span><br><span class="line">    <span class="keyword">puts</span> <span class="variable">$line</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">close</span> <span class="variable">$fileId</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制二进制文件</span></span><br><span class="line"><span class="keyword">set</span> inFile [<span class="keyword">open</span> <span class="string">&quot;in.bin&quot;</span> rb]</span><br><span class="line"><span class="keyword">set</span> outFile [<span class="keyword">open</span> <span class="string">&quot;out.bin&quot;</span> wb]</span><br><span class="line"><span class="keyword">set</span> buf [<span class="keyword">read</span> <span class="variable">$inFile</span> <span class="number">1024</span>]</span><br><span class="line">write <span class="variable">$outFile</span> <span class="variable">$buf</span></span><br><span class="line"><span class="keyword">close</span> <span class="variable">$inFile</span></span><br><span class="line"><span class="keyword">close</span> <span class="variable">$outFile</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html"> </summary>
    
    
    
    <category term="经验总结" scheme="http://example.com/categories/%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="经验总结" scheme="http://example.com/tags/%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
</feed>
